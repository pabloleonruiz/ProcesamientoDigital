<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<!-- saved from url=(0014)about:internet -->
<html xmlns:v="urn:schemas-microsoft-com:vml"
xmlns:o="urn:schemas-microsoft-com:office:office"
xmlns:w="urn:schemas-microsoft-com:office:word"
xmlns:st1="urn:schemas-microsoft-com:office:smarttags"
xmlns="http://www.w3.org/TR/REC-html40">

<head>
<meta http-equiv=Content-Type content="text/html; charset=UTF-8">
<meta name=ProgId content=Word.Document>
<meta name=Generator content="Microsoft Word 10">
<meta name=Originator content="Microsoft Word 10">
<link rel=File-List href="trans_compr_files/filelist.xml">
<title>trans_compr</title>
<o:SmartTagType namespaceuri="urn:schemas-microsoft-com:office:smarttags"
 name="stockticker"/>
<!--[if gte mso 9]><xml>
 <o:DocumentProperties>
  <o:Author>ACADEMIC COMPUTING</o:Author>
  <o:LastAuthor>ACADEMIC COMPUTING</o:LastAuthor>
  <o:Revision>3</o:Revision>
  <o:TotalTime>2</o:TotalTime>
  <o:Created>2004-06-05T01:24:00Z</o:Created>
  <o:LastSaved>2004-10-20T00:18:00Z</o:LastSaved>
  <o:Pages>1</o:Pages>
  <o:Words>1001</o:Words>
  <o:Characters>5706</o:Characters>
  <o:Company>SIUE</o:Company>
  <o:Lines>47</o:Lines>
  <o:Paragraphs>13</o:Paragraphs>
  <o:CharactersWithSpaces>6694</o:CharactersWithSpaces>
  <o:Version>10.3501</o:Version>
 </o:DocumentProperties>
</xml><![endif]--><!--[if gte mso 9]><xml>
 <w:WordDocument>
  <w:SpellingState>Clean</w:SpellingState>
  <w:GrammarState>Clean</w:GrammarState>
  <w:Compatibility>
   <w:BreakWrappedTables/>
   <w:SnapToGridInCell/>
   <w:WrapTextWithPunct/>
   <w:UseAsianBreakRules/>
  </w:Compatibility>
  <w:BrowserLevel>MicrosoftInternetExplorer4</w:BrowserLevel>
 </w:WordDocument>
</xml><![endif]--><!--[if !mso]><object
 classid="clsid:38481807-CA0E-42D2-BF39-B33AF135CC4D" id=ieooui></object>
<style>
st1\:*{behavior:url(#ieooui) }
</style>
<![endif]-->
<style>
<!--
 /* Style Definitions */
 p.MsoNormal, li.MsoNormal, div.MsoNormal
	{mso-style-parent:"";
	margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
h2
	{mso-margin-top-alt:auto;
	margin-right:0in;
	mso-margin-bottom-alt:auto;
	margin-left:0in;
	mso-pagination:widow-orphan;
	mso-outline-level:2;
	font-size:18.0pt;
	font-family:"Times New Roman";}
pre
	{margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:10.0pt;
	font-family:"Courier New";
	mso-fareast-font-family:"Times New Roman";}
span.SpellE
	{mso-style-name:"";
	mso-spl-e:yes;}
span.GramE
	{mso-style-name:"";
	mso-gram-e:yes;}
@page Section1
	{size:8.5in 11.0in;
	margin:1.0in 1.25in 1.0in 1.25in;
	mso-header-margin:.5in;
	mso-footer-margin:.5in;
	mso-paper-source:0;}
div.Section1
	{page:Section1;}
-->
</style>
<!--[if gte mso 10]>
<style>
 /* Style Definitions */
 table.MsoNormalTable
	{mso-style-name:"Table Normal";
	mso-tstyle-rowband-size:0;
	mso-tstyle-colband-size:0;
	mso-style-noshow:yes;
	mso-style-parent:"";
	mso-padding-alt:0in 5.4pt 0in 5.4pt;
	mso-para-margin:0in;
	mso-para-margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:10.0pt;
	font-family:"Times New Roman";}
</style>
<![endif]-->
</head>

<body lang=EN-US style='tab-interval:.5in'><script language="JavaScript" type="text/JavaScript">
function syn(){
if(parent.nav.tree){
 if(parent.nav.tree.loaded){
  parent.nav.tree.selectNode(302);
 }else{
  setTimeout("syn()",500);
}
  }else{
  setTimeout("syn()",500);
  }}
if(parent!=self){
  setTimeout("syn()",100);
}else{
  parent.location.href = "../../index.htm#page=CVIP_C_functions%2Ftrans_compr.htm";
}
originalOnload = window.onload;
if(originalOnload==null){
window.onload = function(){parent.contentLoaded = true;};
}else{
window.onload = function(){originalOnload();parent.contentLoaded = true;};
}
</script> 


<div class=Section1>

<h2>NAME</h2>

<pre><span style='mso-spacerun:yes'>     </span><span class=SpellE>trans_compr</span> <span
class=GramE>-<span style='mso-spacerun:yes'>  </span>Performing</span><span style='mso-spacerun:yes'>  </span>Spectral<span style='mso-spacerun:yes'>  </span>Transform<span style='mso-spacerun:yes'>  </span>Based</pre><pre><span style='mso-spacerun:yes'>                    </span>Compression</pre><pre><o:p>&nbsp;</o:p></pre>

<h2>SYNOPSIS</h2>

<pre><span style='mso-spacerun:yes'>     </span>#include &lt;<span
class=SpellE>vector_quant.h</span>&gt;</pre><pre><o:p>&nbsp;</o:p></pre><pre><span style='mso-spacerun:yes'>     </span>Image *<span
class=SpellE>trans_<span class=GramE>compr</span></span><span class=GramE>(</span>char *filename, Image *image,</pre><pre><span style='mso-spacerun:yes'>      </span><span
class=SpellE><span class=GramE>int</span></span> <span class=SpellE>color_space</span>, <span
class=SpellE>int</span> <span class=SpellE>xform</span>, <span class=SpellE>int</span> <span
class=SpellE>WAVELET_basis</span>,</pre><pre><span style='mso-spacerun:yes'>      </span><span
class=SpellE><span class=GramE>int</span></span> <span class=SpellE>subimage_size</span>, <span
class=SpellE>int</span> quant, <span class=SpellE>int</span> <span
class=SpellE>JPEG_Q_Table</span>,</pre><pre><span style='mso-spacerun:yes'>      </span><span
class=SpellE><span class=GramE>int</span></span> coding, <span class=SpellE>int</span> <span
class=SpellE>data_type</span>, <span class=SpellE>int</span> <span
class=SpellE>remap_type</span>, <span class=SpellE>int</span> <span
class=SpellE>keep_DC</span>)</pre><pre><o:p>&nbsp;</o:p></pre><pre><span style='mso-spacerun:yes'>      </span>&lt;<span
class=GramE>filename</span>&gt;<span style='mso-spacerun:yes'>    </span>file to store the compressed data</pre><pre><span style='mso-spacerun:yes'>      </span>&lt;<span
class=GramE>image</span>&gt;<span style='mso-spacerun:yes'>       </span>input image</pre><pre><span style='mso-spacerun:yes'>      </span>&lt;<span
class=SpellE>color_space</span>&gt; color space</pre><pre><span style='mso-spacerun:yes'>                    </span>0 - RGB</pre><pre><span style='mso-spacerun:yes'>   </span><span style='mso-spacerun:yes'>                 </span>1 - PCT</pre><pre><span style='mso-spacerun:yes'>                    </span>2 - <span
class=SpellE>YCbCr</span></pre><pre><span style='mso-spacerun:yes'>      </span>&lt;<span
class=SpellE><span class=GramE>xform</span></span>&gt;<span style='mso-spacerun:yes'>       </span>transform</pre><pre><span style='mso-spacerun:yes'>                    </span>0 - none</pre><pre><span style='mso-spacerun:yes'>                    </span>1 - DCT</pre><pre><span style='mso-spacerun:yes'>                    </span>2 - WAVELET</pre><pre><span style='mso-spacerun:yes'>      </span>&lt;<span
class=SpellE>WAVELET_basis</span>&gt;WAVELET transform basis function</pre><pre><span style='mso-spacerun:yes'>                    </span>1 - <span
class=SpellE><span class=GramE>haar</span></span></pre><pre><span style='mso-spacerun:yes'>                    </span>2 - <span
class=GramE>daub4</span></pre><pre><span style='mso-spacerun:yes'>      </span>&lt;<span
class=SpellE>subimage_size</span>&gt;block size to do the transform</pre><pre><span style='mso-spacerun:yes'>                    </span>(8, 16, 32, 64, 128, 256, 512)</pre><pre><span style='mso-spacerun:yes'>      </span>&lt;<span
class=GramE>quant</span>&gt;<span style='mso-spacerun:yes'>       </span>quantization</pre><pre><span style='mso-spacerun:yes'>                    </span>0 - none</pre><pre><span style='mso-spacerun:yes'>                    </span>1 - <span
class=GramE>user</span> specified</pre><pre><span style='mso-spacerun:yes'>      </span>&lt;<span
class=SpellE>JEPG_Q_Table</span>&gt;use JPEG quantization table</pre><pre><span style='mso-spacerun:yes'>                    </span>0 - without using</pre><pre><span style='mso-spacerun:yes'>                    </span>1 - using</pre><pre><span style='mso-spacerun:yes'>      </span>&lt;<span
class=GramE>coding</span>&gt;<span style='mso-spacerun:yes'>      </span>use vector quantization or not</pre><pre><span style='mso-spacerun:yes'>                    </span>0 - none</pre><pre><span style='mso-spacerun:yes'>                    </span>1 - <span
class=GramE>user</span> specified Vector Quantization(VQ)</pre><pre><span style='mso-spacerun:yes'>                 </span><span style='mso-spacerun:yes'>   </span>2 - Huffman coding</pre><pre><span style='mso-spacerun:yes'>      </span>&lt;<span
class=SpellE>data_type</span>&gt;<span style='mso-spacerun:yes'>   </span>data type for VQ</pre><pre><span style='mso-spacerun:yes'>                    </span>1 - <span
class=GramE>float</span></pre><pre><span style='mso-spacerun:yes'>                    </span>2 - <span
class=GramE>byte</span></pre><pre><span style='mso-spacerun:yes'>                    </span>3 - <span
class=GramE>short</span></pre><pre><span style='mso-spacerun:yes'>      </span>&lt;<span
class=SpellE>remap_type</span><span class=GramE>&gt;<span style='mso-spacerun:yes'>  </span>remap</span> type for float -&gt; byte/short</pre><pre><span style='mso-spacerun:yes'>                    </span>1 - <span
class=GramE>linear</span> remap</pre><pre><span style='mso-spacerun:yes'>                </span><span style='mso-spacerun:yes'>    </span>2 - <span
class=GramE>log</span> remap</pre><pre><span style='mso-spacerun:yes'>      </span>&lt;<span
class=SpellE>keep_DC</span>&gt;<span style='mso-spacerun:yes'>     </span>quantize the DC of DCT or not</pre><pre><span style='mso-spacerun:yes'>                    </span>0 - quantize it</pre><pre><span style='mso-spacerun:yes'>                    </span>1 - <span
class=GramE>keep</span> it</pre>

<h2><st1:stockticker>PATH</st1:stockticker></h2>

<pre><span style='mso-spacerun:yes'>     </span>$<span class=SpellE>CVIPtoolsHOME\CVIPC\COMPRESSION\trans_compr.c</span></pre><pre><o:p>&nbsp;</o:p></pre>

<h2>DESCRIPTION</h2>

<pre><span style='mso-spacerun:yes'>     </span><span class=SpellE><span
class=GramE>tran_compr</span></span> is designed<span style='mso-spacerun:yes'>  </span>for<span style='mso-spacerun:yes'>  </span>experimentation<span style='mso-spacerun:yes'>  </span>with<span style='mso-spacerun:yes'>  </span>spectral</pre><pre><span style='mso-spacerun:yes'>     </span><span
class=GramE>transform</span> based compression.<span style='mso-spacerun:yes'>  </span>You can select different color</pre><pre><span style='mso-spacerun:yes'>     </span><span
class=GramE>spaces</span> (RGB, PCT, <span class=SpellE>YCbCr</span>), transforms (NONE, DCT,<span style='mso-spacerun:yes'>  </span>DWT),<span style='mso-spacerun:yes'>  </span>the</pre><pre><span style='mso-spacerun:yes'>     </span><span
class=GramE>transform<span style='mso-spacerun:yes'>  </span>block</span><span style='mso-spacerun:yes'>  </span>size<span style='mso-spacerun:yes'>  </span>(8 to 512), quantization type (NONE,</pre><pre><span style='mso-spacerun:yes'>     </span>USER <st1:stockticker>SPEC</st1:stockticker>IFIED TABLE, JPEG_Q_TABLE)<span
class=GramE>,<span style='mso-spacerun:yes'>  </span>coding</span><span style='mso-spacerun:yes'>  </span>method<span style='mso-spacerun:yes'>  </span>(NONE,</pre><pre><span style='mso-spacerun:yes'>     </span>VQ, HUFFMAN), data type for vector quantization (VQ) (FLOAT,</pre><pre><span style='mso-spacerun:yes'>     </span>BYTE, SHORT), remap type for VQ if data <span
class=GramE>type<span style='mso-spacerun:yes'>  </span>is</span><span style='mso-spacerun:yes'>  </span>not<span style='mso-spacerun:yes'>  </span>float</pre><pre><span style='mso-spacerun:yes'>     </span>(LINEAR, LOG), quantization or not of the DC term if the DCT</pre><pre><span style='mso-spacerun:yes'>     </span><span
class=GramE>and</span> VQ are used.</pre><pre><o:p>&nbsp;</o:p></pre><pre><span style='mso-spacerun:yes'>     </span>The equations used for the <span
class=SpellE>YCbCr</span> color space are:</pre><pre><o:p>&nbsp;</o:p></pre><pre><span style='mso-spacerun:yes'>      </span><span
class=GramE>Y<span style='mso-spacerun:yes'>  </span>=</span> 0.299R + 0.587G + 0.114B</pre><pre><span style='mso-spacerun:yes'>      </span><span
class=SpellE>Cb</span> = - 0.1687R - 0.3313G + 0.5B + 2 ** (Sample Precision/2)</pre><pre><span style='mso-spacerun:yes'>      </span>Cr = 0.5R - 0.4187G + 0.0813B + 2 ** (Sample Precision/2)</pre><pre><o:p>&nbsp;</o:p></pre><pre><span style='mso-spacerun:yes'>      </span>R = Y + 1.402Cr</pre><pre><span style='mso-spacerun:yes'>      </span>G = Y - 0.34414(<span
class=SpellE>Cb</span> - 2 ** (Sample Precision/2)) -</pre><pre><span style='mso-spacerun:yes'>          </span>0.71414(Cr - 2 ** (Sample Precision/2))</pre><pre><span style='mso-spacerun:yes'>      </span>B = Y + 1.722(<span
class=SpellE>Cb</span> - 2 ** (Sample Precision/2))</pre><pre><o:p>&nbsp;</o:p></pre><pre><span style='mso-spacerun:yes'>     </span>Sample Precision is number of bits per pixel per color band.</pre><pre><o:p>&nbsp;</o:p></pre><pre><span style='mso-spacerun:yes'>     </span>The compression ratio and entropy will appear in <span
class=GramE>the<span style='mso-spacerun:yes'>  </span><span class=SpellE>termi</span></span>-</pre><pre><span style='mso-spacerun:yes'>     </span><span
class=SpellE><span class=GramE>nal</span></span> window (UNIX).</pre><pre><o:p>&nbsp;</o:p></pre><pre><span style='mso-spacerun:yes'>     </span>When designing an algorithm, follow these rules:</pre><pre><o:p>&nbsp;</o:p></pre><pre><span style='mso-spacerun:yes'>      </span>&lt;<span
class=SpellE>color_space</span>&gt; Do not use PCT and <span class=SpellE>YCbCr</span> for gray-level</pre><pre><span style='mso-spacerun:yes'>                    </span><span
class=GramE>images</span>.</pre><pre><span style='mso-spacerun:yes'>      </span>&lt;<span
class=SpellE>WAVELET_Basis</span>&gt; It will <span class=GramE>not<span style='mso-spacerun:yes'>  </span>take</span><span style='mso-spacerun:yes'>  </span>effect<span style='mso-spacerun:yes'>  </span>unless<span style='mso-spacerun:yes'>  </span>you<span style='mso-spacerun:yes'>  </span>use</pre><pre><span style='mso-spacerun:yes'>  </span><span style='mso-spacerun:yes'>                  </span><span
class=GramE>WAVELET transform</span>.</pre><pre><span style='mso-spacerun:yes'>      </span>&lt;<span
class=SpellE>JEPG_Q_Table</span>&gt;Use it only if you use the DCT on 8*8 blocks.</pre><pre><span style='mso-spacerun:yes'>      </span>&lt;<span
class=GramE>coding</span>&gt;<span style='mso-spacerun:yes'>      </span>If you use Huffman coding, you should either</pre><pre><span style='mso-spacerun:yes'>                    </span><span
class=GramE>use</span> <span class=SpellE>JPEG_Q_Table</span> or specify quantization</pre><pre><span style='mso-spacerun:yes'>                    </span><span
class=GramE>table</span>, and use data type FLOAT. And the data</pre><pre><span style='mso-spacerun:yes'>                    </span><span
class=GramE>will</span> convert to BYTE automatically.</pre><pre><span style='mso-spacerun:yes'>      </span>&lt;<span
class=SpellE>data_type</span>&gt;<span style='mso-spacerun:yes'>   </span><span
class=GramE>It</span> will not take effect unless you use VQ.</pre><pre><span style='mso-spacerun:yes'>      </span>&lt;<span
class=SpellE>remap_type</span><span class=GramE>&gt;<span style='mso-spacerun:yes'>  </span>It</span> will not take effect unless you use VQ and</pre><pre><span style='mso-spacerun:yes'>                    </span><span
class=GramE>BYTE/SHORT.</span></pre><pre> <span style='mso-spacerun:yes'>     </span>&lt;<span
class=SpellE>DC_Quantize</span>&gt; It will not take effect unless you use the</pre><pre><span style='mso-spacerun:yes'>                    </span><span
class=GramE>DCT and VQ.</span></pre><pre><o:p>&nbsp;</o:p></pre><pre><span style='mso-spacerun:yes'>     </span>If the size of the input image is not a power of 2, <span
class=GramE>it<span style='mso-spacerun:yes'>  </span>will</span></pre><pre><span style='mso-spacerun:yes'>     </span><span
class=GramE>be</span> zero padded.</pre><pre><o:p>&nbsp;</o:p></pre><pre><span style='mso-spacerun:yes'>     </span>For user specified quantization &lt;quant = 1&gt;, you need a file</pre><pre><span style='mso-spacerun:yes'>     </span><span
class=GramE>named</span> table in this file, in the following format:</pre><pre><span style='mso-spacerun:yes'>      </span>16 32 <span
class=SpellE>32</span> 48 <span class=SpellE>48</span> <span class=SpellE>48</span> 64 <span
class=SpellE>64</span> <span class=SpellE>64</span> <span class=SpellE>64</span></pre><pre><span style='mso-spacerun:yes'>      </span>32 48 <span
class=SpellE>48</span> 64 <span class=SpellE>64</span> <span class=SpellE>64</span> 128 <span
class=SpellE>128</span> <span class=SpellE>128</span> <span class=SpellE>128</span></pre><pre><o:p>&nbsp;</o:p></pre><pre><span style='mso-spacerun:yes'>     </span>The first ten for the ten <span
class=SpellE>subimages</span> in red band, <span class=GramE>the<span style='mso-spacerun:yes'>  </span>second</span></pre><pre><span style='mso-spacerun:yes'>     </span><span
class=GramE>ten<span style='mso-spacerun:yes'>  </span>for</span><span style='mso-spacerun:yes'>  </span>the ten <span
class=SpellE>subimages</span> in green band, the third ten for</pre><pre><span style='mso-spacerun:yes'>     </span><span
class=GramE>the</span> ten <span class=SpellE>subimages</span> in blue band.</pre><pre><o:p>&nbsp;</o:p></pre><pre><span style='mso-spacerun:yes'>     </span>For user specified vector <span
class=GramE>quantization<span style='mso-spacerun:yes'>  </span>&lt;</span>coding<span style='mso-spacerun:yes'>  </span>=<span style='mso-spacerun:yes'>  </span>1&gt;,<span style='mso-spacerun:yes'>  </span>you</pre><pre><span style='mso-spacerun:yes'>     </span><span
class=GramE>need<span style='mso-spacerun:yes'>  </span>a</span><span style='mso-spacerun:yes'>  </span>file<span style='mso-spacerun:yes'>  </span>named <span
class=SpellE>xvq_set</span> in the directory from which the</pre><pre><span style='mso-spacerun:yes'>     </span><span
class=GramE>program</span> is run. Specify the vector table in this file.<span style='mso-spacerun:yes'>  </span>This</pre><pre><span style='mso-spacerun:yes'>     </span><span
class=GramE>file</span> should be in the following format:</pre><pre><o:p>&nbsp;</o:p></pre><pre><span style='mso-spacerun:yes'>      </span>If <span
class=SpellE>color_space</span> = 0 (RGB)</pre><pre><span style='mso-spacerun:yes'>          </span>32 <span
class=SpellE>32</span> 1 2 <span class=SpellE>2</span> 1024 2 <span
class=SpellE>2</span> 1024 2 <span class=SpellE>2</span> 512 2 <span
class=SpellE>2</span> 512</pre><pre><span style='mso-spacerun:yes'>          </span>2 <span
class=SpellE>2</span> 512 2 <span class=SpellE>2</span> 256 4 <span
class=SpellE>4</span> 128 4 <span class=SpellE>4</span> 128 4 <span
class=SpellE>4</span> 128</pre><pre><span style='mso-spacerun:yes'>      </span><span
class=GramE>vector-height</span> vector-width codebook-entry for <span
class=SpellE>subimage</span> 1</pre><pre><span style='mso-spacerun:yes'>      </span><span
class=GramE>vector-height</span> vector-width codebook-entry for <span
class=SpellE>subimage</span> 2</pre><pre><span style='mso-spacerun:yes'>      </span>...</pre><pre><span style='mso-spacerun:yes'>      </span><span
class=GramE>vector-height</span> vector-width codebook-entry for <span
class=SpellE>subimage</span> 10</pre><pre><o:p>&nbsp;</o:p></pre><pre><span style='mso-spacerun:yes'>      </span>If <span
class=SpellE>color_space</span> = 1 (PCT) or 2 (<span class=SpellE>YCbCr</span>)</pre><pre><span style='mso-spacerun:yes'>          </span>64 <span
class=SpellE>64</span> <span class=SpellE>64</span> <span class=SpellE>64</span> <span
class=SpellE>64</span> <span class=SpellE>64</span> 1 <span class=SpellE>1</span> <span
class=SpellE>1</span> 2 <span class=SpellE>2</span> <span class=SpellE>2</span> <span
class=SpellE>2</span> <span class=SpellE>2</span> <span class=SpellE>2</span> 1024 256 <span
class=SpellE>256</span></pre><pre><span style='mso-spacerun:yes'>          </span>2 <span
class=SpellE>2</span> <span class=SpellE>2</span> <span class=SpellE>2</span> <span
class=SpellE>2</span> <span class=SpellE>2</span> 1024 256 <span class=SpellE>256</span> 2 <span
class=SpellE>2</span> <span class=SpellE>2</span> <span class=SpellE>2</span> <span
class=SpellE>2</span> <span class=SpellE>2</span> 512 64 <span class=SpellE>64</span></pre><pre><span style='mso-spacerun:yes'>          </span>2 <span
class=SpellE>2</span> <span class=SpellE>2</span> <span class=SpellE>2</span> <span
class=SpellE>2</span> <span class=SpellE>2</span> 512 64 <span class=SpellE>64</span> 2 <span
class=SpellE>2</span> <span class=SpellE>2</span> <span class=SpellE>2</span> <span
class=SpellE>2</span> <span class=SpellE>2</span> 512 64 <span class=SpellE>64</span></pre><pre><span style='mso-spacerun:yes'>          </span>2 <span
class=SpellE>2</span> <span class=SpellE>2</span> <span class=SpellE>2</span> <span
class=SpellE>2</span> <span class=SpellE>2</span> 256 64 <span class=SpellE>64</span> 4 <span
class=SpellE>4</span> <span class=SpellE>4</span> <span class=SpellE>4</span> <span
class=SpellE>4</span> <span class=SpellE>4</span> 128 0 <span class=SpellE>0</span></pre><pre><span style='mso-spacerun:yes'>          </span>4 <span
class=SpellE>4</span> <span class=SpellE>4</span> <span class=SpellE>4</span> <span
class=SpellE>4</span> 128 0 <span class=SpellE>0</span> 4 <span class=SpellE>4</span> <span
class=SpellE>4</span> <span class=SpellE>4</span> <span class=SpellE>4</span> <span
class=SpellE>4</span> 64 0 <span class=SpellE>0</span></pre><pre><span style='mso-spacerun:yes'>      </span>red-vector-<span
class=GramE>height<span style='mso-spacerun:yes'>  </span>red</span>-vector-width<span style='mso-spacerun:yes'>     </span>green-vector-height</pre><pre><span style='mso-spacerun:yes'>      </span><span
class=GramE>green-vector-width</span> blue-vector-height<span style='mso-spacerun:yes'>   </span>blue-vector-width</pre><pre><span style='mso-spacerun:yes'>      </span><span
class=GramE>red-codebook-entry</span> green-codebook-entry blue-codebook-entry</pre><pre><span style='mso-spacerun:yes'>      </span><span
class=GramE>for</span> <span class=SpellE>subimage</span> 1</pre><pre><span style='mso-spacerun:yes'>      </span>...</pre><pre><span style='mso-spacerun:yes'>      </span>red-vector-<span
class=GramE>height<span style='mso-spacerun:yes'>  </span>red</span>-vector-width<span style='mso-spacerun:yes'>     </span>green-vector-height</pre><pre><span style='mso-spacerun:yes'>      </span><span
class=GramE>green-vector-width</span> blue-vector-height<span style='mso-spacerun:yes'>   </span>blue-vector-width</pre><pre><span style='mso-spacerun:yes'>      </span><span
class=GramE>red-codebook-entry</span> green-codebook-entry blue-codebook-entry</pre><pre><span style='mso-spacerun:yes'>      </span><span
class=GramE>for</span> <span class=SpellE>subimage</span> 10</pre><pre><o:p>&nbsp;</o:p></pre>

<h2>TYPES AND C<st1:stockticker>ONST</st1:stockticker>ANTS</h2>

<pre><span style='mso-spacerun:yes'>     </span>None</pre><pre><o:p>&nbsp;</o:p></pre>

<h2>RETURN VALUES</h2>

<pre><span style='mso-spacerun:yes'>     </span><span class=GramE>decompressed</span> image</pre><pre><o:p>&nbsp;</o:p></pre>

<h2>HISTORY</h2>

<pre><span style='mso-spacerun:yes'>     </span>History information recorded: None</pre><pre><o:p>&nbsp;</o:p></pre>

<h2>BUGS</h2>

<pre><span style='mso-spacerun:yes'>     </span>None</pre><pre><o:p>&nbsp;</o:p></pre>

<h2>EXAMPLE</h2>

<pre><span style='mso-spacerun:yes'>      </span>#include &lt;sys/<span
class=SpellE>types.h</span>&gt;</pre><pre><span style='mso-spacerun:yes'>      </span>#include &lt;sys/<span
class=SpellE>stat.h</span>&gt;</pre><pre><span style='mso-spacerun:yes'>      </span>#include &quot;<span
class=SpellE>CVIPtoolkit.h</span>&quot;</pre><pre><span style='mso-spacerun:yes'>      </span>#include &quot;<span
class=SpellE>CVIPconvert.h</span>&quot;</pre><pre><span style='mso-spacerun:yes'>      </span>#include &quot;<span
class=SpellE>CVIPdef.h</span>&quot;</pre><pre><span style='mso-spacerun:yes'>      </span>#include &quot;<span
class=SpellE>CVIPimage.h</span>&quot;</pre><pre><span style='mso-spacerun:yes'>      </span>#include &quot;<span
class=SpellE>CVIPtransform.h</span>&quot;</pre><pre><span style='mso-spacerun:yes'>      </span>#include &quot;<span
class=SpellE>vector_quant.h</span>&quot;</pre><pre><o:p>&nbsp;</o:p></pre><pre><span style='mso-spacerun:yes'>      </span><span
class=GramE>void</span> main()</pre><pre><span style='mso-spacerun:yes'>      </span>{</pre><pre><span style='mso-spacerun:yes'>     </span><span style='mso-spacerun:yes'>     </span>Image *<span
class=SpellE>cvipImage</span>, *<span class=SpellE>outImage</span>;</pre><pre><span style='mso-spacerun:yes'>          </span><span
class=GramE>char</span> *<span class=SpellE>inputfile</span>, *<span
class=SpellE>outfile</span>;</pre><pre><o:p>&nbsp;</o:p></pre><pre><span style='mso-spacerun:yes'>          </span><span
class=SpellE>setDisplay_<span class=GramE>Image</span></span><span class=GramE>(</span>&quot;picture&quot;, &quot;Default&quot;);</pre><pre><span style='mso-spacerun:yes'>          </span><span
class=SpellE>print_<span class=GramE>CVIP</span></span><span class=GramE>(</span>&quot;0Enter the Input File Name:<span style='mso-spacerun:yes'>  </span>&quot;);</pre><pre><span style='mso-spacerun:yes'>          </span><span
class=SpellE><span class=GramE>inputfile</span></span> =(char *) <span
class=SpellE>getString_CVIP</span>();</pre><pre><span style='mso-spacerun:yes'>          </span><span
class=SpellE><span class=GramE>cvipImage</span></span> = <span class=SpellE>read_Image</span>(<span
class=SpellE>inputfile</span>, 1);</pre><pre><span style='mso-spacerun:yes'>          </span><span
class=SpellE>view_<span class=GramE>Image</span></span><span class=GramE>(</span><span
class=SpellE>cvipImage</span>, <span class=SpellE>inputfile</span>);</pre><pre><span style='mso-spacerun:yes'>          </span><span
class=SpellE>print_<span class=GramE>CVIP</span></span><span class=GramE>(</span>&quot;0Enter the Compressed File Name:&quot;);</pre><pre><span style='mso-spacerun:yes'>          </span><span
class=SpellE><span class=GramE>outfile</span></span> = (char *) <span
class=SpellE>getString_CVIP</span>();</pre><pre><span style='mso-spacerun:yes'>          </span>/* <span
class=SpellE>YCbCr</span>, DCT on 8*8 block, <span class=SpellE>JPEG_Q_Table</span>, Huffman</pre><pre><span style='mso-spacerun:yes'>          </span><span
class=GramE>coding</span> */</pre><pre><span style='mso-spacerun:yes'>          </span><span
class=SpellE><span class=GramE>outImage</span></span> = <span class=SpellE>trans_compr</span>(<span
class=SpellE>outfile</span>, <span class=SpellE>cvipImage</span>, 1, 1, 1, 8,</pre><pre><span style='mso-spacerun:yes'>          </span>0, 1, 2, 1, 1, 0);</pre><pre><span style='mso-spacerun:yes'>          </span><span
class=SpellE>view_<span class=GramE>Image</span></span><span class=GramE>(</span><span
class=SpellE>outImage</span>, <span class=SpellE>outfile</span>);</pre><pre><o:p>&nbsp;</o:p></pre><pre><span style='mso-spacerun:yes'>      </span>}</pre><pre><o:p>&nbsp;</o:p></pre>

<h2>SEE ALSO</h2>

<pre><span style='mso-spacerun:yes'>     </span><span class=SpellE><span
class=GramE>xvq</span></span><span class=GramE>(</span>3)<span style='mso-spacerun:yes'>  </span><span
class=SpellE>vector_quant</span>(3),<span style='mso-spacerun:yes'>  </span>wavelet(3),<span style='mso-spacerun:yes'>  </span><span
class=SpellE>dct</span>(3),<span style='mso-spacerun:yes'>   </span><span
class=SpellE>huffman</span>(3),</pre><pre><span style='mso-spacerun:yes'>     </span><span
class=GramE>jpeg(</span>3)</pre><pre><o:p>&nbsp;</o:p></pre>

<h2>AUTHOR</h2>

<pre><span style='mso-spacerun:yes'>     </span>Copyright (C) 2000, 2004 SIUE - by Scott E.<span style='mso-spacerun:yes'>  </span><span
class=GramE>Umbaugh<span style='mso-spacerun:yes'>  </span>and</span><span style='mso-spacerun:yes'>  </span><span
class=SpellE>Zhijian</span></pre><pre><span style='mso-spacerun:yes'>     </span>Lin.</pre><pre><o:p>&nbsp;</o:p></pre>

<p class=MsoNormal><o:p>&nbsp;</o:p></p>

</div>

</body>

</html>
