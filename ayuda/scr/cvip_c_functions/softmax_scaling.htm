<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<!-- saved from url=(0014)about:internet -->
<html xmlns:v="urn:schemas-microsoft-com:vml"
xmlns:o="urn:schemas-microsoft-com:office:office"
xmlns:w="urn:schemas-microsoft-com:office:word"
xmlns:st1="urn:schemas-microsoft-com:office:smarttags"
xmlns="http://www.w3.org/TR/REC-html40">

<head>
<meta http-equiv=Content-Type content="text/html; charset=UTF-8">
<meta name=ProgId content=Word.Document>
<meta name=Generator content="Microsoft Word 11">
<meta name=Originator content="Microsoft Word 11">
<link rel=File-List href="softmax_scaling_files/filelist.xml">
<title>softmax_scaling</title>
<o:SmartTagType namespaceuri="urn:schemas-microsoft-com:office:smarttags"
 name="stockticker"/>
<!--[if gte mso 9]><xml>
 <o:DocumentProperties>
  <o:Author>ACADEMIC COMPUTING</o:Author>
  <o:Template>Normal</o:Template>
  <o:LastAuthor>akharba</o:LastAuthor>
  <o:Revision>4</o:Revision>
  <o:TotalTime>3</o:TotalTime>
  <o:Created>2005-07-02T21:14:00Z</o:Created>
  <o:LastSaved>2006-07-08T22:28:00Z</o:LastSaved>
  <o:Pages>1</o:Pages>
  <o:Words>521</o:Words>
  <o:Characters>2971</o:Characters>
  <o:Company>SIUE</o:Company>
  <o:Lines>24</o:Lines>
  <o:Paragraphs>6</o:Paragraphs>
  <o:CharactersWithSpaces>3486</o:CharactersWithSpaces>
  <o:Version>11.5606</o:Version>
 </o:DocumentProperties>
</xml><![endif]--><!--[if gte mso 9]><xml>
 <w:WordDocument>
  <w:SpellingState>Clean</w:SpellingState>
  <w:GrammarState>Clean</w:GrammarState>
  <w:ValidateAgainstSchemas/>
  <w:SaveIfXMLInvalid>false</w:SaveIfXMLInvalid>
  <w:IgnoreMixedContent>false</w:IgnoreMixedContent>
  <w:AlwaysShowPlaceholderText>false</w:AlwaysShowPlaceholderText>
  <w:Compatibility>
   <w:BreakWrappedTables/>
   <w:SnapToGridInCell/>
   <w:WrapTextWithPunct/>
   <w:UseAsianBreakRules/>
  </w:Compatibility>
  <w:BrowserLevel>MicrosoftInternetExplorer4</w:BrowserLevel>
 </w:WordDocument>
</xml><![endif]--><!--[if gte mso 9]><xml>
 <w:LatentStyles DefLockedState="false" LatentStyleCount="156">
 </w:LatentStyles>
</xml><![endif]--><!--[if !mso]><object
 classid="clsid:38481807-CA0E-42D2-BF39-B33AF135CC4D" id=ieooui></object>
<style>
st1\:*{behavior:url(#ieooui) }
</style>
<![endif]-->
<style>
<!--
 /* Style Definitions */
 p.MsoNormal, li.MsoNormal, div.MsoNormal
	{mso-style-parent:"";
	margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
h2
	{mso-margin-top-alt:auto;
	margin-right:0in;
	mso-margin-bottom-alt:auto;
	margin-left:0in;
	mso-pagination:widow-orphan;
	mso-outline-level:2;
	font-size:18.0pt;
	font-family:"Times New Roman";
	font-weight:bold;}
p
	{font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
pre
	{margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt;
	font-size:10.0pt;
	font-family:"Courier New";
	mso-fareast-font-family:"Times New Roman";}
span.SpellE
	{mso-style-name:"";
	mso-spl-e:yes;}
span.GramE
	{mso-style-name:"";
	mso-gram-e:yes;}
@page Section1
	{size:8.5in 11.0in;
	margin:1.0in 1.25in 1.0in 1.25in;
	mso-header-margin:.5in;
	mso-footer-margin:.5in;
	mso-paper-source:0;}
div.Section1
	{page:Section1;}
-->
</style>
<!--[if gte mso 10]>
<style>
 /* Style Definitions */
 table.MsoNormalTable
	{mso-style-name:"Table Normal";
	mso-tstyle-rowband-size:0;
	mso-tstyle-colband-size:0;
	mso-style-noshow:yes;
	mso-style-parent:"";
	mso-padding-alt:0in 5.4pt 0in 5.4pt;
	mso-para-margin:0in;
	mso-para-margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:10.0pt;
	font-family:"Times New Roman";
	mso-ansi-language:#0400;
	mso-fareast-language:#0400;
	mso-bidi-language:#0400;}
</style>
<![endif]-->
</head>

<body lang=EN-US style='tab-interval:.5in'><script language="JavaScript" type="text/JavaScript">
function syn(){
if(parent.nav.tree){
 if(parent.nav.tree.loaded){
  parent.nav.tree.selectNode(285);
 }else{
  setTimeout("syn()",500);
}
  }else{
  setTimeout("syn()",500);
  }}
if(parent!=self){
  setTimeout("syn()",100);
}else{
  parent.location.href = "../../index.htm#page=CVIP_C_functions%2Fsoftmax_scaling.htm";
}
originalOnload = window.onload;
if(originalOnload==null){
window.onload = function(){parent.contentLoaded = true;};
}else{
window.onload = function(){originalOnload();parent.contentLoaded = true;};
}
</script> 


<div class=Section1>

<h2>NAME</h2>

<pre><span style='mso-tab-count:1'>        </span><span class=SpellE>softmax_scaling</span> – normalizes a 2D matrix using <span
class=SpellE>softmax</span> </pre><pre><span style='mso-tab-count:2'>               </span><span style='mso-spacerun:yes'> </span><span
style='mso-tab-count:1'>       </span><span style='mso-spacerun:yes'>   </span><span
class=GramE>scaling</span> normalization method</pre><pre><o:p>&nbsp;</o:p></pre>

<h2>SYNOPSIS</h2>

<pre style='margin-left:.5in'>#include &quot;<span class=SpellE>stdio.h</span>&quot;</pre><pre
style='margin-left:.5in'>#include &quot;<span class=SpellE>math.h</span>&quot;</pre><pre
style='margin-left:.5in'>#include &quot;<span class=SpellE>stdlib.h</span>&quot;</pre><pre
style='margin-left:.5in'><o:p>&nbsp;</o:p></pre><pre style='margin-left:.5in'><span
class=GramE>float</span> **<span class=SpellE>softmax_scaling</span>(float **vector, <span
class=SpellE>int</span> <span class=SpellE>i</span>, <span class=SpellE>int</span> j, float <span
class=SpellE>r_softmax</span>, <span class=SpellE>int</span> option, <span
class=SpellE>int</span> *<span class=SpellE>err_code</span>)</pre><pre
style='margin-left:.5in'><o:p>&nbsp;</o:p></pre><pre style='margin-left:.5in'>&lt;vector&gt; - 2D pointer to a matrix</pre><pre
style='margin-left:.5in'>&lt;<span class=SpellE>i</span>&gt; - number of columns in the matrix</pre><pre><span style='mso-spacerun:yes'>      </span>&lt;j&gt; - number of rows in the matrix</pre><pre><span style='mso-spacerun:yes'>      </span>&lt;<span
class=SpellE>r_softmax</span>&gt; - parameter for <span class=SpellE>softmax</span> scaling</pre><pre><span style='mso-spacerun:yes'>      </span>&lt;option&gt; - 0 – to normalize the training set</pre><pre><span style='mso-spacerun:yes'>                 </span>1 – to normalize the test set</pre><pre><span style='mso-spacerun:yes'>      </span>&lt;<span
class=SpellE>err_code</span>&gt; - pointer to the error code; use 0 for no error</pre><pre><o:p>&nbsp;</o:p></pre><pre><o:p>&nbsp;</o:p></pre>

<h2><st1:stockticker
style="BACKGROUND-POSITION: left bottom; BACKGROUND-IMAGE: url(res://ietag.dll/#34/#1001); BACKGROUND-REPEAT: repeat-x"
w:st="on">PATH</st1:stockticker></h2>

<pre><span style='mso-tab-count:1'>        </span>$<span class=SpellE>CVIPtoolsHOME\CVIPC\FEATURE\softmax_scaling.c</span></pre><pre><o:p>&nbsp;</o:p></pre>

<h2>DESCRIPTION</h2>

<pre><span style='mso-spacerun:yes'>     </span>This function normalizes a matrix using <span
class=SpellE>softmax</span> scaling</pre><pre><span style='mso-spacerun:yes'>     </span>method. The formula used for <span
class=SpellE>softmax</span> scaling is given in </pre><pre><span style='mso-spacerun:yes'>     </span>chapter 6 of the following book:</pre><pre><o:p>&nbsp;</o:p></pre><pre><span
style='mso-tab-count:1'>        </span>Computer Imaging: Digital Image Analysis and Processing</pre><pre><o:p>&nbsp;</o:p></pre><pre><span style='mso-spacerun:yes'>           </span>Scott E Umbaugh, A CRC Press Book, 2005</pre><pre><o:p>&nbsp;</o:p></pre><pre><o:p>&nbsp;</o:p></pre>

<h2>EXAMPLE</h2>

<p class=MsoNormal><span style='font-size:9.0pt;font-family:"Courier New"'>#include<span
style='mso-tab-count:1'>      </span>&quot;stdlib.h&quot;<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-size:9.0pt;font-family:"Courier New"'>#include<span
style='mso-tab-count:1'>      </span>&quot;CVIPtoolkit.h&quot;<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-size:9.0pt;font-family:"Courier New"'>#include<span
style='mso-tab-count:1'>      </span>&quot;CVIPpattern.h&quot;<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-size:9.0pt;font-family:"Courier New"'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal><span style='font-size:9.0pt;font-family:"Courier New"'>#define
no_of_col 2<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-size:9.0pt;font-family:"Courier New"'>#define
no_of_row 3<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-size:9.0pt;font-family:"Courier New"'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal><span style='font-size:9.0pt;font-family:"Courier New"'>void
main()<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-size:9.0pt;font-family:"Courier New"'>{<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-size:9.0pt;font-family:"Courier New"'><span
style='mso-tab-count:1'>       </span>float<span style='mso-tab-count:1'>  </span>**vector;<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-size:9.0pt;font-family:"Courier New"'><span
style='mso-tab-count:1'>       </span>float<span style='mso-tab-count:1'>  </span>r_softmax=2;<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-size:9.0pt;font-family:"Courier New"'><span
style='mso-tab-count:1'>       </span>int<span style='mso-tab-count:2'>           </span>i,
j;<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-size:9.0pt;font-family:"Courier New"'><span
style='mso-tab-count:1'>       </span>int<span style='mso-tab-count:2'>           </span>option
= 0;<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-size:9.0pt;font-family:"Courier New"'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal><span style='font-size:9.0pt;font-family:"Courier New"'><span
style='mso-tab-count:1'>       </span>/*<span style='mso-spacerun:yes'> 
</span>Define a pointer pointing to the error code<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-size:9.0pt;font-family:"Courier New"'><span
style='mso-tab-count:2'>              </span>Initialize<span
style='mso-spacerun:yes'>  </span>it to 0.<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-size:9.0pt;font-family:"Courier New"'><span
style='mso-tab-count:1'>       </span>*/<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-size:9.0pt;font-family:"Courier New"'><span
style='mso-tab-count:1'>       </span>int<span style='mso-tab-count:2'>           </span>*err_code;<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-size:9.0pt;font-family:"Courier New"'><span
style='mso-tab-count:1'>       </span>err_code = malloc(sizeof(int));<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-size:9.0pt;font-family:"Courier New"'><span
style='mso-tab-count:1'>       </span>*err_code = 0;<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-size:9.0pt;font-family:"Courier New"'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal><span style='font-size:9.0pt;font-family:"Courier New"'><span
style='mso-tab-count:1'>       </span>/* Memory allocation. The size of vector
is (no_of_row+2)*no_of_col */<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-size:9.0pt;font-family:"Courier New"'><span
style='mso-tab-count:1'>       </span>vector =
malloc((no_of_row+2)*sizeof(float *));<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-size:9.0pt;font-family:"Courier New"'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal><span style='font-size:9.0pt;font-family:"Courier New"'><span
style='mso-tab-count:1'>       </span>for(i=0;i&lt;(no_of_row+2);i++)<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-size:9.0pt;font-family:"Courier New"'><span
style='mso-tab-count:1'>       </span>{<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-size:9.0pt;font-family:"Courier New"'><span
style='mso-tab-count:2'>              </span>vector[i] =
malloc(no_of_col*sizeof(float));<span style='mso-tab-count:2'>           </span><o:p></o:p></span></p>

<p class=MsoNormal><span style='font-size:9.0pt;font-family:"Courier New"'><span
style='mso-tab-count:1'>       </span>}<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-size:9.0pt;font-family:"Courier New"'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal><span style='font-size:9.0pt;font-family:"Courier New"'><span
style='mso-tab-count:1'>       </span>/* Get the vectors. The items should be
separated by &quot;,&quot;. vector[0][0],vector[0][1],...vector[row][col] */<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-size:9.0pt;font-family:"Courier New"'><span
style='mso-tab-count:1'>       </span>print_CVIP(&quot;\t\tPlease type in the
items in vector: &quot;);<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-size:9.0pt;font-family:"Courier New"'><span
style='mso-tab-count:1'>       </span>for(j=0;j&lt;no_of_row;j++)<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-size:9.0pt;font-family:"Courier New"'><span
style='mso-tab-count:1'>       </span>{<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-size:9.0pt;font-family:"Courier New"'><span
style='mso-tab-count:2'>              </span>for(i=0;i&lt;no_of_col;i++)<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-size:9.0pt;font-family:"Courier New"'><span
style='mso-tab-count:2'>              </span>{<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-size:9.0pt;font-family:"Courier New"'><span
style='mso-tab-count:3'>                     </span>scanf(&quot;%f,&quot;,
&amp;vector[j][i]);<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-size:9.0pt;font-family:"Courier New"'><span
style='mso-tab-count:2'>              </span>}<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-size:9.0pt;font-family:"Courier New"'><span
style='mso-tab-count:2'>              </span><o:p></o:p></span></p>

<p class=MsoNormal><span style='font-size:9.0pt;font-family:"Courier New"'><span
style='mso-tab-count:1'>       </span>}<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-size:9.0pt;font-family:"Courier New"'><span
style='mso-tab-count:1'>       </span><o:p></o:p></span></p>

<p class=MsoNormal><span style='font-size:9.0pt;font-family:"Courier New"'><span
style='mso-tab-count:1'>       </span>/* Call c function, and return the
vector. option is 0, means the vector comes from training set */<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-size:9.0pt;font-family:"Courier New"'><span
style='mso-tab-count:1'>       </span>vector = softmax_scaling (vector,
no_of_col, no_of_row, r_softmax, option, err_code);<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-size:9.0pt;font-family:"Courier New"'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal><span style='font-size:9.0pt;font-family:"Courier New"'><span
style='mso-tab-count:1'>       </span>/* If err_code is not 0, print out the
err_code */<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-size:9.0pt;font-family:"Courier New"'><span
style='mso-tab-count:1'>       </span>if(*err_code != 0)<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-size:9.0pt;font-family:"Courier New"'><span
style='mso-tab-count:1'>       </span>{<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-size:9.0pt;font-family:"Courier New"'><span
style='mso-tab-count:2'>              </span>printf(&quot;Error code:
%d\n&quot;, *err_code);<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-size:9.0pt;font-family:"Courier New"'><span
style='mso-tab-count:1'>       </span>}<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-size:9.0pt;font-family:"Courier New"'><span
style='mso-tab-count:1'>       </span>else<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-size:9.0pt;font-family:"Courier New"'><span
style='mso-tab-count:1'>       </span>{<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-size:9.0pt;font-family:"Courier New"'><span
style='mso-tab-count:2'>              </span>/* Print out the result */<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-size:9.0pt;font-family:"Courier New"'><span
style='mso-tab-count:2'>              </span>for(j=0;j&lt;no_of_row+2;j++)<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-size:9.0pt;font-family:"Courier New"'><span
style='mso-tab-count:2'>              </span>{<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-size:9.0pt;font-family:"Courier New"'><span
style='mso-tab-count:3'>                     </span>for(i=0;i&lt;no_of_col;i++)<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-size:9.0pt;font-family:"Courier New"'><span
style='mso-tab-count:3'>                     </span>{<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-size:9.0pt;font-family:"Courier New"'><span
style='mso-tab-count:4'>                           </span>printf(&quot;%f
&quot;, vector[j][i]);<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-size:9.0pt;font-family:"Courier New"'><span
style='mso-tab-count:3'>                     </span>}<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-size:9.0pt;font-family:"Courier New"'><span
style='mso-tab-count:3'>                     </span>printf(&quot;%s\n&quot;,&quot;&quot;);<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-size:9.0pt;font-family:"Courier New"'><span
style='mso-tab-count:2'>              </span>}<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-size:9.0pt;font-family:"Courier New"'><span
style='mso-tab-count:1'>       </span>}<span style='mso-tab-count:1'>      </span><o:p></o:p></span></p>

<p class=MsoNormal><span style='font-size:9.0pt;font-family:"Courier New"'><span
style='mso-tab-count:1'>       </span>/* The last two rows in the vector is for
normalize another vector. Typically, from test set. */<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-size:9.0pt;font-family:"Courier New"'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal><span style='font-size:9.0pt;font-family:"Courier New"'><span
style='mso-tab-count:1'>       </span>/* Get another vectors. The items should
be separated by &quot;,&quot;. vector[0][0],vector[0][1],...vector[row][col] */<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-size:9.0pt;font-family:"Courier New"'><span
style='mso-tab-count:1'>       </span>print_CVIP(&quot;\t\tPlease type in the
items in another vector: &quot;);<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-size:9.0pt;font-family:"Courier New"'><span
style='mso-tab-count:1'>       </span>for(j=0;j&lt;no_of_row;j++)<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-size:9.0pt;font-family:"Courier New"'><span
style='mso-tab-count:1'>       </span>{<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-size:9.0pt;font-family:"Courier New"'><span
style='mso-tab-count:2'>              </span>for(i=0;i&lt;no_of_col;i++)<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-size:9.0pt;font-family:"Courier New"'><span
style='mso-tab-count:2'>              </span>{<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-size:9.0pt;font-family:"Courier New"'><span
style='mso-tab-count:3'>                     </span>scanf(&quot;%f,&quot;,
&amp;vector[j][i]);<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-size:9.0pt;font-family:"Courier New"'><span
style='mso-tab-count:2'>              </span>}<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-size:9.0pt;font-family:"Courier New"'><span
style='mso-tab-count:2'>              </span><o:p></o:p></span></p>

<p class=MsoNormal><span style='font-size:9.0pt;font-family:"Courier New"'><span
style='mso-tab-count:1'>       </span>}<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-size:9.0pt;font-family:"Courier New"'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal><span style='font-size:9.0pt;font-family:"Courier New"'><span
style='mso-tab-count:1'>       </span>option = 1;<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-size:9.0pt;font-family:"Courier New"'><span
style='mso-tab-count:1'>       </span>/* Call c function, and return the
vector. option is 1, means the vector comes from test set */<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-size:9.0pt;font-family:"Courier New"'><span
style='mso-tab-count:1'>       </span>vector = softmax_scaling (vector, no_of_col,
no_of_row+2, r_softmax, option, err_code);<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-size:9.0pt;font-family:"Courier New"'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal><span style='font-size:9.0pt;font-family:"Courier New"'><span
style='mso-tab-count:1'>       </span>/* If err_code is not 0, print out the
err_code */<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-size:9.0pt;font-family:"Courier New"'><span
style='mso-tab-count:1'>       </span>if(*err_code != 0)<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-size:9.0pt;font-family:"Courier New"'><span
style='mso-tab-count:1'>       </span>{<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-size:9.0pt;font-family:"Courier New"'><span
style='mso-tab-count:2'>              </span>printf(&quot;Error code:
%d\n&quot;, *err_code);<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-size:9.0pt;font-family:"Courier New"'><span
style='mso-tab-count:1'>       </span>}<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-size:9.0pt;font-family:"Courier New"'><span
style='mso-tab-count:1'>       </span>else<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-size:9.0pt;font-family:"Courier New"'><span
style='mso-tab-count:1'>       </span>{<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-size:9.0pt;font-family:"Courier New"'><span
style='mso-tab-count:2'>              </span>/* Print out the result */<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-size:9.0pt;font-family:"Courier New"'><span
style='mso-tab-count:2'>              </span>for(j=0;j&lt;no_of_row+2;j++)<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-size:9.0pt;font-family:"Courier New"'><span
style='mso-tab-count:2'>              </span>{<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-size:9.0pt;font-family:"Courier New"'><span
style='mso-tab-count:3'>                     </span>for(i=0;i&lt;no_of_col;i++)<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-size:9.0pt;font-family:"Courier New"'><span
style='mso-tab-count:3'>                     </span>{<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-size:9.0pt;font-family:"Courier New"'><span
style='mso-tab-count:4'>                           </span>printf(&quot;%f
&quot;, vector[j][i]);<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-size:9.0pt;font-family:"Courier New"'><span
style='mso-tab-count:3'>                     </span>}<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-size:9.0pt;font-family:"Courier New"'><span
style='mso-tab-count:3'>                     </span>printf(&quot;%s\n&quot;,&quot;&quot;);<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-size:9.0pt;font-family:"Courier New"'><span
style='mso-tab-count:2'>              </span>}<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-size:9.0pt;font-family:"Courier New"'><span
style='mso-tab-count:1'>       </span>}<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-size:9.0pt;font-family:"Courier New"'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal><span style='font-size:9.0pt;font-family:"Courier New"'><span
style='mso-tab-count:1'>       </span>/* Free the pointers */<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-size:9.0pt;font-family:"Courier New"'><span
style='mso-tab-count:1'>       </span>for(i=0;i&lt;(no_of_row+2);i++)<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-size:9.0pt;font-family:"Courier New"'><span
style='mso-tab-count:1'>       </span>{<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-size:9.0pt;font-family:"Courier New"'><span
style='mso-tab-count:2'>              </span>free(vector[i]);<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-size:9.0pt;font-family:"Courier New"'><span
style='mso-tab-count:1'>       </span>}<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-size:9.0pt;font-family:"Courier New"'><span
style='mso-tab-count:1'>       </span>free(vector);<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-size:9.0pt;font-family:"Courier New"'>}<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-size:9.0pt;font-family:"Courier New"'><o:p>&nbsp;</o:p></span></p>

<p>&nbsp;</p>

<h2>TYPES AND C<st1:stockticker
style="BACKGROUND-POSITION: left bottom; BACKGROUND-IMAGE: url(res://ietag.dll/#34/#1001); BACKGROUND-REPEAT: repeat-x"
w:st="on">ONST</st1:stockticker>ANTS</h2>

<pre><span style='mso-spacerun:yes'>     </span>None</pre><pre><o:p>&nbsp;</o:p></pre>

<h2>RETURN VALUES</h2>

<pre><span style='mso-spacerun:yes'>     </span>A <span class=SpellE>softmax</span> scaled matrix pointer</pre><pre><o:p>&nbsp;</o:p></pre>

<h2>HISTORY</h2>

<pre><span style='mso-spacerun:yes'>     </span>History information recorded: None</pre><pre><o:p>&nbsp;</o:p></pre>

<h2>SEE ALSO</h2>

<pre><span style='mso-spacerun:yes'>     </span>FEATURE library</pre>

<h2>AUTHOR</h2>

<pre><span style='mso-spacerun:yes'>     </span>Copyright (C) 1996, 2004, 2005 SIUE - by Scott E. Umbaugh,</pre><pre><span style='mso-spacerun:yes'>     </span>Husain <span
class=SpellE>Kagalwalla</span>, Geer <span class=SpellE>Shuang</span>, <span
class=SpellE>Amit</span> Kharbanda.</pre>

<p class=MsoNormal><o:p>&nbsp;</o:p></p>

</div>

</body>

</html>
