<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<!-- saved from url=(0014)about:internet -->
<html xmlns:v="urn:schemas-microsoft-com:vml"
xmlns:o="urn:schemas-microsoft-com:office:office"
xmlns:w="urn:schemas-microsoft-com:office:word"
xmlns:st1="urn:schemas-microsoft-com:office:smarttags"
xmlns="http://www.w3.org/TR/REC-html40">

<head>
<meta http-equiv=Content-Type content="text/html; charset=UTF-8">
<meta name=ProgId content=Word.Document>
<meta name=Generator content="Microsoft Word 10">
<meta name=Originator content="Microsoft Word 10">
<link rel=File-List
href="bit_compress,%20bit_decompress,%20bitplane_sep_files/filelist.xml">
<title>bit_compress,bit_decompress,bitplane_sep</title>
<o:SmartTagType namespaceuri="urn:schemas-microsoft-com:office:smarttags"
 name="stockticker"/>
<!--[if gte mso 9]><xml>
 <o:DocumentProperties>
  <o:Author>ACADEMIC COMPUTING</o:Author>
  <o:LastAuthor>ACADEMIC COMPUTING</o:LastAuthor>
  <o:Revision>5</o:Revision>
  <o:TotalTime>2</o:TotalTime>
  <o:Created>2004-06-04T21:50:00Z</o:Created>
  <o:LastSaved>2004-10-19T23:44:00Z</o:LastSaved>
  <o:Pages>1</o:Pages>
  <o:Words>744</o:Words>
  <o:Characters>4245</o:Characters>
  <o:Company>SIUE</o:Company>
  <o:Lines>35</o:Lines>
  <o:Paragraphs>9</o:Paragraphs>
  <o:CharactersWithSpaces>4980</o:CharactersWithSpaces>
  <o:Version>10.3501</o:Version>
 </o:DocumentProperties>
</xml><![endif]--><!--[if gte mso 9]><xml>
 <w:WordDocument>
  <w:SpellingState>Clean</w:SpellingState>
  <w:GrammarState>Clean</w:GrammarState>
  <w:Compatibility>
   <w:BreakWrappedTables/>
   <w:SnapToGridInCell/>
   <w:WrapTextWithPunct/>
   <w:UseAsianBreakRules/>
  </w:Compatibility>
  <w:BrowserLevel>MicrosoftInternetExplorer4</w:BrowserLevel>
 </w:WordDocument>
</xml><![endif]--><!--[if !mso]><object
 classid="clsid:38481807-CA0E-42D2-BF39-B33AF135CC4D" id=ieooui></object>
<style>
st1\:*{behavior:url(#ieooui) }
</style>
<![endif]-->
<style>
<!--
 /* Style Definitions */
 p.MsoNormal, li.MsoNormal, div.MsoNormal
	{mso-style-parent:"";
	margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
h2
	{mso-margin-top-alt:auto;
	margin-right:0in;
	mso-margin-bottom-alt:auto;
	margin-left:0in;
	mso-pagination:widow-orphan;
	mso-outline-level:2;
	font-size:18.0pt;
	font-family:"Times New Roman";}
pre
	{margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:10.0pt;
	font-family:"Courier New";
	mso-fareast-font-family:"Times New Roman";}
span.SpellE
	{mso-style-name:"";
	mso-spl-e:yes;}
span.GramE
	{mso-style-name:"";
	mso-gram-e:yes;}
@page Section1
	{size:8.5in 11.0in;
	margin:1.0in 1.25in 1.0in 1.25in;
	mso-header-margin:.5in;
	mso-footer-margin:.5in;
	mso-paper-source:0;}
div.Section1
	{page:Section1;}
-->
</style>
<!--[if gte mso 10]>
<style>
 /* Style Definitions */
 table.MsoNormalTable
	{mso-style-name:"Table Normal";
	mso-tstyle-rowband-size:0;
	mso-tstyle-colband-size:0;
	mso-style-noshow:yes;
	mso-style-parent:"";
	mso-padding-alt:0in 5.4pt 0in 5.4pt;
	mso-para-margin:0in;
	mso-para-margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:10.0pt;
	font-family:"Times New Roman";}
</style>
<![endif]-->
</head>

<body lang=EN-US style='tab-interval:.5in'><script language="JavaScript" type="text/JavaScript">
function syn(){
if(parent.nav.tree){
 if(parent.nav.tree.loaded){
  parent.nav.tree.selectNode(88);
 }else{
  setTimeout("syn()",500);
}
  }else{
  setTimeout("syn()",500);
  }}
if(parent!=self){
  setTimeout("syn()",100);
}else{
  parent.location.href = "../../index.htm#page=CVIP_C_functions%2Fbit_compress%2C+bit_decompress%2C+bitplane_sep.htm";
}
originalOnload = window.onload;
if(originalOnload==null){
window.onload = function(){parent.contentLoaded = true;};
}else{
window.onload = function(){originalOnload();parent.contentLoaded = true;};
}
</script> 


<div class=Section1>

<h2>NAME</h2>

<pre><span style='mso-spacerun:yes'>     </span><span class=SpellE>bit_compress</span>, <span
class=SpellE>bit_decompress</span>, <span class=SpellE>bitplane_sep</span> <span
class=GramE>-<span style='mso-spacerun:yes'>  </span>Performs</span><span style='mso-spacerun:yes'>  </span>bit-</pre><pre><span style='mso-spacerun:yes'>     </span><span
class=GramE>plane</span> <span class=SpellE>runlength</span> coding</pre><pre><o:p>&nbsp;</o:p></pre>

<h2>SYNOPSIS</h2>

<pre><span style='mso-spacerun:yes'>      </span>#include &quot;<span
class=SpellE>CVIPtoolkit.h</span>&quot;</pre><pre><span style='mso-spacerun:yes'>      </span>#include &quot;<span
class=SpellE>CVIPconvert.h</span>&quot;</pre><pre><span style='mso-spacerun:yes'>      </span>#include &quot;<span
class=SpellE>CVIPdef.h</span>&quot;</pre><pre><span style='mso-spacerun:yes'>      </span>#include &quot;<span
class=SpellE>bitplane_RLC.h</span>&quot;</pre><pre><span style='mso-spacerun:yes'>      </span>#include &lt;sys/<span
class=SpellE>types.h</span>&gt;</pre><pre><span style='mso-spacerun:yes'>      </span>#include &lt;sys/<span
class=SpellE>stat.h</span>&gt;</pre><pre><o:p>&nbsp;</o:p></pre><pre><span style='mso-spacerun:yes'>     </span><span
class=SpellE><span class=GramE>int</span></span> <span class=SpellE>bit_compress</span>(Image<span style='mso-spacerun:yes'>  </span>*<span
class=SpellE>inputImage</span>,<span style='mso-spacerun:yes'>  </span>char<span style='mso-spacerun:yes'>  </span>*filename,<span style='mso-spacerun:yes'>  </span>byte</pre><pre><span style='mso-spacerun:yes'>     </span><span
class=GramE>sect )</span></pre><pre><o:p>&nbsp;</o:p></pre><pre><span style='mso-spacerun:yes'>      </span>&lt;<span
class=SpellE><span class=GramE>inputImage</span></span>&gt; - pointer to the image</pre><pre><span style='mso-spacerun:yes'>      </span>&lt;<span
class=GramE>filename</span>&gt; - pointer to a character array</pre><pre><span style='mso-spacerun:yes'>      </span>&lt;<span
class=GramE>sect</span>&gt; - <span class=SpellE>bitmask</span> of planes to retain</pre><pre><o:p>&nbsp;</o:p></pre><pre><span style='mso-spacerun:yes'>     </span>Image *<span
class=SpellE>bit_<span class=GramE>decompress</span></span><span class=GramE>(</span>char *filename)</pre><pre><o:p>&nbsp;</o:p></pre><pre><span style='mso-spacerun:yes'>      </span>&lt;<span
class=GramE>filename</span>&gt; - pointer to a character array</pre><pre><o:p>&nbsp;</o:p></pre><pre><span style='mso-spacerun:yes'>     </span>Image *<span
class=SpellE>bit_<span class=GramE>planeadd</span></span><span class=GramE>(</span>char *filename)</pre><pre><o:p>&nbsp;</o:p></pre><pre><span style='mso-spacerun:yes'>      </span>&lt;<span
class=GramE>filename</span>&gt; - pointer to a character array</pre><pre><o:p>&nbsp;</o:p></pre><pre><span style='mso-spacerun:yes'>     </span>Image *<span
class=SpellE>bitplane_<span class=GramE>sep</span></span><span class=GramE>(</span>Image *<span
class=SpellE>input_Image</span>, char *string)</pre><pre><o:p>&nbsp;</o:p></pre><pre><span style='mso-spacerun:yes'>      </span>&lt;<span
class=SpellE>input_Image</span>&gt; - pointer to an Image</pre><pre><span style='mso-spacerun:yes'>      </span>&lt;<span
class=GramE>string</span>&gt; - string containing bits to retain (7,6,5,...,0)</pre><pre><o:p>&nbsp;</o:p></pre>

<h2><st1:stockticker>PATH</st1:stockticker></h2>

<pre><span style='mso-spacerun:yes'>     </span>$<span class=SpellE>CVIPtoolsHOME\CVIPC\COMPRESSION\bitplane_RLC.c</span></pre><pre><o:p>&nbsp;</o:p></pre>

<h2>DESCRIPTION</h2>

<pre><span style='mso-spacerun:yes'>     </span><span class=SpellE>bit_<span
class=GramE>compress</span></span><span class=GramE><span style='mso-spacerun:yes'>  </span>takes</span><span style='mso-spacerun:yes'>  </span>three<span style='mso-spacerun:yes'>  </span>parameters,<span style='mso-spacerun:yes'>  </span>the<span style='mso-spacerun:yes'>   </span>input<span style='mso-spacerun:yes'>   </span>Image</pre><pre><span style='mso-spacerun:yes'>     </span><span
class=GramE>pointer</span>,<span style='mso-spacerun:yes'>  </span>the<span style='mso-spacerun:yes'>  </span>filename<span style='mso-spacerun:yes'>  </span>to<span style='mso-spacerun:yes'>  </span>store the encoded data, and the</pre><pre><span style='mso-spacerun:yes'>     </span><span
class=GramE>bits</span> to retain. This algorithm <span class=GramE>decomposes<span style='mso-spacerun:yes'>  </span>the</span><span style='mso-spacerun:yes'>  </span>input<span style='mso-spacerun:yes'>  </span>image</pre><pre><span style='mso-spacerun:yes'>     </span><span
class=GramE>into<span style='mso-spacerun:yes'>  </span>eight</span> binary <span
class=SpellE>bitplanes</span> each <span class=SpellE>corressponding</span> to each bit</pre><pre><span style='mso-spacerun:yes'>     </span><span
class=GramE>position</span> in an eight bit binary. Then each <span
class=SpellE>bitplane</span> <span class=GramE>is<span style='mso-spacerun:yes'>  </span>run</span>-</pre><pre><span style='mso-spacerun:yes'>     </span><span
class=GramE>length <span style='mso-spacerun:yes'> </span>coded</span> separately and written into an individual file</pre><pre><span style='mso-spacerun:yes'>     </span><span
class=GramE>name</span> derived from the input filename. <span class=GramE>The<span style='mso-spacerun:yes'>  </span>user</span><span style='mso-spacerun:yes'>  </span>is<span style='mso-spacerun:yes'>  </span>advised</pre><pre><span style='mso-spacerun:yes'>     </span><span
class=GramE>not<span style='mso-spacerun:yes'>  </span>to</span><span style='mso-spacerun:yes'>  </span>provide<span style='mso-spacerun:yes'>  </span>the extension for the filename because the</pre><pre><span style='mso-spacerun:yes'>     </span><span
class=GramE>program</span> <span class=SpellE>automaticaly</span> appends suitable extension with numbers</pre><pre><span style='mso-spacerun:yes'>    </span><span style='mso-spacerun:yes'> </span><span
class=GramE>to</span> identify the <span class=SpellE>bitplane</span> files.</pre><pre><o:p>&nbsp;</o:p></pre><pre><span style='mso-spacerun:yes'>     </span><span
class=SpellE><span class=GramE>bit_decompress</span></span> takes a pointer<span style='mso-spacerun:yes'>  </span>to<span style='mso-spacerun:yes'>  </span>the<span style='mso-spacerun:yes'>  </span>encoded<span style='mso-spacerun:yes'>  </span>data<span style='mso-spacerun:yes'>  </span>file</pre><pre><span style='mso-spacerun:yes'>     </span><span
class=GramE>name</span>,<span style='mso-spacerun:yes'>   </span>and<span style='mso-spacerun:yes'>  </span>returns<span style='mso-spacerun:yes'>  </span>a<span style='mso-spacerun:yes'>  </span>pointer<span style='mso-spacerun:yes'>  </span>to the decompressed image.</pre><pre><span style='mso-spacerun:yes'>     </span>Since there are eight files with <span
class=GramE>the<span style='mso-spacerun:yes'>  </span>same</span><span style='mso-spacerun:yes'>  </span>name<span style='mso-spacerun:yes'>  </span>with<span style='mso-spacerun:yes'>  </span>dif-</pre><pre><span style='mso-spacerun:yes'>     </span><span
class=SpellE><span class=GramE>ferent</span></span><span class=GramE><span style='mso-spacerun:yes'>  </span>extension</span>(each<span style='mso-spacerun:yes'>  </span>file corresponds to a <span
class=SpellE>bitplane</span>), the</pre><pre><span style='mso-spacerun:yes'>     </span><span
class=GramE>program</span> automatically derives the extension and decodes each</pre><pre><span style='mso-spacerun:yes'>     </span><span
class=GramE>file<span style='mso-spacerun:yes'>  </span><span class=SpellE>sequentialy</span></span>.<span style='mso-spacerun:yes'>  </span>So, the user is advised not to enter the</pre><pre><span style='mso-spacerun:yes'>     </span><span
class=GramE>extension</span>. Even the user enters a wrong <span class=GramE>extension<span style='mso-spacerun:yes'>  </span>the</span><span style='mso-spacerun:yes'>  </span>pro-</pre><pre><span style='mso-spacerun:yes'>     </span><span
class=GramE>gram<span style='mso-spacerun:yes'>  </span>takes</span> care of it by appending the proper extension. It</pre><pre><span style='mso-spacerun:yes'>     </span><span
class=GramE>generates</span> seven images and returns the pointer to the<span style='mso-spacerun:yes'>  </span><span
class=SpellE>eigth</span></pre><pre><span style='mso-spacerun:yes'>     </span><span
class=GramE>image</span>.<span style='mso-spacerun:yes'>  </span><span
class=GramE>Each<span style='mso-spacerun:yes'>  </span>image</span> corresponds to the one of the eight bit-</pre><pre><span style='mso-spacerun:yes'>     </span><span
class=GramE>plane</span> of the <span class=SpellE>originalimage</span>.</pre><pre><o:p>&nbsp;</o:p></pre><pre><span style='mso-spacerun:yes'>     </span><span
class=SpellE><span class=GramE>bit_planeadd</span></span> takes a pointer<span style='mso-spacerun:yes'>  </span>to<span style='mso-spacerun:yes'>  </span>the<span style='mso-spacerun:yes'>  </span>character<span style='mso-spacerun:yes'>  </span>array<span style='mso-spacerun:yes'>  </span>and</pre><pre><span style='mso-spacerun:yes'>     </span><span
class=GramE>returns</span> pointer to the image. The character array represents</pre><pre><span style='mso-spacerun:yes'>     </span><span
class=GramE>the</span> filename to be decoded(without any extension). <span
class=GramE>The<span style='mso-spacerun:yes'>  </span>same</span></pre><pre><span style='mso-spacerun:yes'>     </span><span
class=SpellE><span class=GramE>explainations</span></span><span class=GramE><span style='mso-spacerun:yes'>  </span>for</span><span style='mso-spacerun:yes'>  </span>no<span style='mso-spacerun:yes'>  </span>extension<span style='mso-spacerun:yes'>  </span>as discussed in the above</pre><pre><span style='mso-spacerun:yes'>     </span><span
class=GramE>paragraph<span style='mso-spacerun:yes'>  </span>applies</span><span style='mso-spacerun:yes'>  </span>here<span style='mso-spacerun:yes'>  </span>too.<span style='mso-spacerun:yes'>  </span><span
class=GramE>The<span style='mso-spacerun:yes'>  </span>operation</span><span style='mso-spacerun:yes'>  </span>is<span style='mso-spacerun:yes'>  </span>same<span style='mso-spacerun:yes'>  </span>as</pre><pre><span style='mso-spacerun:yes'>     </span><span
class=SpellE><span class=GramE>bit_decompress</span></span> except it allows the user to add any <span
class=SpellE>combina</span>-</pre><pre><span style='mso-spacerun:yes'>     </span><span
class=SpellE><span class=GramE>tion</span></span> of <span class=SpellE>bitplanes</span> together and display the resultant<span style='mso-spacerun:yes'>  </span>image.</pre><pre><span style='mso-spacerun:yes'>     </span>The user is advised not to add the same <span
class=SpellE>bitplane</span> twice as it</pre><pre><span style='mso-spacerun:yes'>     </span><span
class=GramE>makes</span> no sense.<span style='mso-spacerun:yes'>  </span>It returns <span
class=GramE>the<span style='mso-spacerun:yes'>  </span>pointer</span><span style='mso-spacerun:yes'>  </span>to<span style='mso-spacerun:yes'>  </span>the<span style='mso-spacerun:yes'>  </span>resultant</pre><pre><span style='mso-spacerun:yes'>     </span><span
class=GramE>image</span>.</pre><pre><o:p>&nbsp;</o:p></pre>

<h2>TYPES AND C<st1:stockticker>ONST</st1:stockticker>ANTS</h2>

<pre><o:p>&nbsp;</o:p></pre>

<h2>RETURN VALUES</h2>

<pre><span style='mso-spacerun:yes'>     </span><span class=SpellE>bit_compress</span>: 0 on success, -1 on failure</pre><pre><o:p>&nbsp;</o:p></pre><pre><span style='mso-spacerun:yes'>     </span><span
class=SpellE>bit_decompress</span>, <span class=SpellE>bit_planeadd</span>: a valid Image pointer <span
class=GramE>on<span style='mso-spacerun:yes'>  </span><span class=SpellE>suc</span></span>-</pre><pre><span style='mso-spacerun:yes'>     </span><span
class=SpellE><span class=GramE>cess</span></span>, a NULL pointer on failure</pre><pre><o:p>&nbsp;</o:p></pre>

<h2>HISTORY</h2>

<pre><span style='mso-spacerun:yes'>     </span>History information recorded: None</pre><pre><o:p>&nbsp;</o:p></pre>

<h2>DIAGNOSTICS</h2>

<pre><span style='mso-spacerun:yes'>     </span>The Bit plane <span
class=SpellE>Runlength</span> coding <span class=GramE>and<span style='mso-spacerun:yes'>  </span>decoding</span><span style='mso-spacerun:yes'>  </span>algorithm<span style='mso-spacerun:yes'>  </span>was</pre><pre><span style='mso-spacerun:yes'>     </span><span
class=GramE>designed<span style='mso-spacerun:yes'>  </span>to</span><span style='mso-spacerun:yes'>  </span>work<span style='mso-spacerun:yes'>  </span>only<span style='mso-spacerun:yes'>  </span>on<span style='mso-spacerun:yes'>  </span>monochrome image(.<span
class=SpellE>pgm</span>).<span style='mso-spacerun:yes'>  </span>Eight</pre><pre><span style='mso-spacerun:yes'>     </span><span
class=GramE>files</span> are derived from the filename passed<span style='mso-spacerun:yes'>  </span>in<span style='mso-spacerun:yes'>  </span>the<span style='mso-spacerun:yes'>  </span>command</pre><pre><span style='mso-spacerun:yes'>     </span><span
class=GramE>line <span style='mso-spacerun:yes'> </span>or</span> entered by the user, by appending proper extension.</pre><pre><span style='mso-spacerun:yes'>     </span>So, the user has to enter the filename without any extension</pre><pre><span style='mso-spacerun:yes'>     </span><span
class=GramE>wherever</span> he or she needs to enter the filename.</pre><pre><o:p>&nbsp;</o:p></pre>

<h2>EXAMPLE</h2>

<pre><span style='mso-spacerun:yes'>      </span>#include &lt;<span
class=SpellE>CVIPtoolkit.h</span>&gt;</pre><pre><span style='mso-spacerun:yes'>      </span>#include &lt;<span
class=SpellE>CVIPimage.h</span>&gt;</pre><pre><span style='mso-spacerun:yes'>      </span>#include &lt;<span
class=SpellE>CVIPdef.h</span>&gt;</pre><pre><span style='mso-spacerun:yes'>      </span>#include &lt;<span
class=SpellE>CVIPconvert.h</span>&gt;</pre><pre><span style='mso-spacerun:yes'>      </span>#include &lt;<span
class=SpellE>CVIPview.h</span>&gt;</pre><pre><span style='mso-spacerun:yes'>      </span>#include &quot;<span
class=SpellE>bitplane_RLC.h</span>&quot;</pre><pre><span style='mso-spacerun:yes'>      </span>#include &lt;sys/<span
class=SpellE>types.h</span>&gt;</pre><pre><span style='mso-spacerun:yes'>      </span>#include &lt;sys/<span
class=SpellE>stat.h</span>&gt;</pre><pre><span style='mso-spacerun:yes'>      </span>#define VIEWER &quot;picture&quot;</pre><pre><span style='mso-spacerun:yes'>      </span>#define VIDEO_APP &quot;<span
class=SpellE>SunVideo</span> &amp;&quot;</pre><pre><o:p>&nbsp;</o:p></pre><pre><span style='mso-spacerun:yes'>      </span><span
class=GramE>void</span> main()</pre><pre><span style='mso-spacerun:yes'>      </span>{</pre><pre><span style='mso-spacerun:yes'>      </span>Image *<span
class=SpellE>cvipImage</span>;</pre><pre><span style='mso-spacerun:yes'>      </span>IMAGE_FORMAT format;</pre><pre><span style='mso-spacerun:yes'>      </span><span
class=GramE>char</span> *<span class=SpellE>inputfile</span>,*<span
class=SpellE>outputfile</span>;</pre><pre><o:p>&nbsp;</o:p></pre><pre><span style='mso-spacerun:yes'>      </span>(<span
class=GramE>void</span>) <span class=SpellE>setDisplay_Image</span>(VIEWER, &quot;Default&quot;);</pre><pre><span style='mso-spacerun:yes'>      </span><span
class=SpellE>print_<span class=GramE>CVIP</span></span><span class=GramE>(</span>&quot;\n\t\<span
class=SpellE>tEnter</span> the<span style='mso-spacerun:yes'>  </span>Input File Name:<span style='mso-spacerun:yes'>  </span>&quot;);</pre><pre><span style='mso-spacerun:yes'>      </span><span
class=SpellE><span class=GramE>inputfile</span></span> =(char *) <span
class=SpellE>getString_CVIP</span>();</pre><pre><span style='mso-spacerun:yes'>      </span><span
class=GramE>format</span> = <span class=SpellE>getFormat_CVIP</span>(<span
class=SpellE>inputfile</span>);</pre><pre><span style='mso-spacerun:yes'>      </span><span
class=SpellE><span class=GramE>cvipImage</span></span> = <span class=SpellE>read_Image</span>(inputfile,1);</pre><pre><span style='mso-spacerun:yes'>      </span><span
class=SpellE>view_<span class=GramE>Image</span></span><span class=GramE>(</span><span
class=SpellE>cvipImage</span>, <span class=SpellE>inputfile</span>);</pre><pre><span style='mso-spacerun:yes'>      </span><span
class=GramE>free(</span><span class=SpellE>inputfile</span>);</pre><pre><span style='mso-spacerun:yes'>      </span>/* the following call performs the bit plane run length</pre><pre><span style='mso-spacerun:yes'>      </span><span
class=GramE>coding</span> on the <span class=SpellE>inputnput</span> image<span style='mso-spacerun:yes'>  </span>retaining only the most</pre><pre><span style='mso-spacerun:yes'>      </span><span
class=GramE>significant</span> bit and the data is stored in &quot;file1&quot; */</pre><pre><span style='mso-spacerun:yes'>      </span><span
class=SpellE>bit_<span class=GramE>compress</span></span><span class=GramE>(</span>cvipImage,&quot;file1&quot;,128);</pre><pre><span style='mso-spacerun:yes'>      </span>/* the following call performs the bit plane run length</pre><pre><span style='mso-spacerun:yes'>      </span><span
class=GramE>decoding</span> of the input image */</pre><pre><span style='mso-spacerun:yes'>      </span><span
class=SpellE><span class=GramE>cvipImage</span></span><span class=GramE>=</span><span
class=SpellE>bit_decompress</span>(&quot;file1&quot;);</pre><pre><span style='mso-spacerun:yes'>      </span><span
class=SpellE>print_<span class=GramE>CVIP</span></span><span class=GramE>(</span>&quot;\n\t\<span
class=SpellE>tEnter</span> the Output File Name:<span style='mso-spacerun:yes'>  </span>&quot;);</pre><pre><span style='mso-spacerun:yes'>      </span><span
class=SpellE><span class=GramE>outputfile</span></span> = <span class=SpellE>getString_CVIP</span>();</pre><pre><span style='mso-spacerun:yes'>      </span><span
class=SpellE>view_<span class=GramE>Image</span></span><span class=GramE>(</span><span
class=SpellE>cvipImage,outputfile</span>);</pre><pre><span style='mso-spacerun:yes'>      </span><span
class=SpellE>write_<span class=GramE>Image</span></span><span class=GramE>(</span>cvipImage,outputfile,CVIP_NO,CVIP_NO,format,1);</pre><pre><span style='mso-spacerun:yes'>      </span><span
class=GramE>free(</span><span class=SpellE>outputfile</span>);</pre><pre><span style='mso-spacerun:yes'>      </span>}</pre><pre><o:p>&nbsp;</o:p></pre>

<h2>SEE ALSO</h2>

<pre><span style='mso-spacerun:yes'>     </span>COMPRESSION library</pre><pre><o:p>&nbsp;</o:p></pre>

<h2>AUTHOR</h2>

<pre><span style='mso-spacerun:yes'>     </span><span class=SpellE>Muthu</span> <span
class=SpellE>kumar</span>, Southern Illinois University at Edwardsville</pre><pre><o:p>&nbsp;</o:p></pre><pre><span style='mso-spacerun:yes'>     </span>Copyright (C) 1995, 2004 SIUE - by Scott Umbaugh and <span
class=SpellE>Muthu</span> <span class=SpellE>kumar</span>.</pre><pre><o:p>&nbsp;</o:p></pre>

<p class=MsoNormal><o:p>&nbsp;</o:p></p>

</div>

</body>

</html>
