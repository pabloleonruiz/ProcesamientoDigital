<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<!-- saved from url=(0014)about:internet -->
<html xmlns:v="urn:schemas-microsoft-com:vml"
xmlns:o="urn:schemas-microsoft-com:office:office"
xmlns:w="urn:schemas-microsoft-com:office:word"
xmlns:st1="urn:schemas-microsoft-com:office:smarttags"
xmlns="http://www.w3.org/TR/REC-html40">

<head>
<meta http-equiv=Content-Type content="text/html; charset=UTF-8">
<meta name=ProgId content=Word.Document>
<meta name=Generator content="Microsoft Word 10">
<meta name=Originator content="Microsoft Word 10">
<link rel=File-List href="parametric_wiener_files/filelist.xml">
<title>parametric_wiener</title>
<o:SmartTagType namespaceuri="urn:schemas-microsoft-com:office:smarttags"
 name="stockticker"/>
<!--[if gte mso 9]><xml>
 <o:DocumentProperties>
  <o:Author>ACADEMIC COMPUTING</o:Author>
  <o:LastAuthor>ACADEMIC COMPUTING</o:LastAuthor>
  <o:Revision>3</o:Revision>
  <o:TotalTime>2</o:TotalTime>
  <o:Created>2004-06-05T00:36:00Z</o:Created>
  <o:LastSaved>2004-10-20T00:10:00Z</o:LastSaved>
  <o:Pages>1</o:Pages>
  <o:Words>656</o:Words>
  <o:Characters>3744</o:Characters>
  <o:Company>SIUE</o:Company>
  <o:Lines>31</o:Lines>
  <o:Paragraphs>8</o:Paragraphs>
  <o:CharactersWithSpaces>4392</o:CharactersWithSpaces>
  <o:Version>10.3501</o:Version>
 </o:DocumentProperties>
</xml><![endif]--><!--[if gte mso 9]><xml>
 <w:WordDocument>
  <w:GrammarState>Clean</w:GrammarState>
  <w:Compatibility>
   <w:BreakWrappedTables/>
   <w:SnapToGridInCell/>
   <w:WrapTextWithPunct/>
   <w:UseAsianBreakRules/>
  </w:Compatibility>
  <w:BrowserLevel>MicrosoftInternetExplorer4</w:BrowserLevel>
 </w:WordDocument>
</xml><![endif]--><!--[if !mso]><object
 classid="clsid:38481807-CA0E-42D2-BF39-B33AF135CC4D" id=ieooui></object>
<style>
st1\:*{behavior:url(#ieooui) }
</style>
<![endif]-->
<style>
<!--
 /* Style Definitions */
 p.MsoNormal, li.MsoNormal, div.MsoNormal
	{mso-style-parent:"";
	margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
h2
	{mso-margin-top-alt:auto;
	margin-right:0in;
	mso-margin-bottom-alt:auto;
	margin-left:0in;
	mso-pagination:widow-orphan;
	mso-outline-level:2;
	font-size:18.0pt;
	font-family:"Times New Roman";}
pre
	{margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:10.0pt;
	font-family:"Courier New";
	mso-fareast-font-family:"Times New Roman";}
span.GramE
	{mso-style-name:"";
	mso-gram-e:yes;}
@page Section1
	{size:8.5in 11.0in;
	margin:1.0in 1.25in 1.0in 1.25in;
	mso-header-margin:.5in;
	mso-footer-margin:.5in;
	mso-paper-source:0;}
div.Section1
	{page:Section1;}
-->
</style>
<!--[if gte mso 10]>
<style>
 /* Style Definitions */
 table.MsoNormalTable
	{mso-style-name:"Table Normal";
	mso-tstyle-rowband-size:0;
	mso-tstyle-colband-size:0;
	mso-style-noshow:yes;
	mso-style-parent:"";
	mso-padding-alt:0in 5.4pt 0in 5.4pt;
	mso-para-margin:0in;
	mso-para-margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:10.0pt;
	font-family:"Times New Roman";}
</style>
<![endif]-->
</head>

<body lang=EN-US style='tab-interval:.5in'><script language="JavaScript" type="text/JavaScript">
function syn(){
if(parent.nav.tree){
 if(parent.nav.tree.loaded){
  parent.nav.tree.selectNode(241);
 }else{
  setTimeout("syn()",500);
}
  }else{
  setTimeout("syn()",500);
  }}
if(parent!=self){
  setTimeout("syn()",100);
}else{
  parent.location.href = "../../index.htm#page=CVIP_C_functions%2Fparametric_wiener.htm";
}
originalOnload = window.onload;
if(originalOnload==null){
window.onload = function(){parent.contentLoaded = true;};
}else{
window.onload = function(){originalOnload();parent.contentLoaded = true;};
}
</script> 


<div class=Section1>

<h2>NAME</h2>

<pre><span style='mso-spacerun:yes'>     </span>parametric_wiener - performs a parametric wiener filter</pre><pre><o:p>&nbsp;</o:p></pre>

<h2>SYNOPSIS</h2>

<pre><span style='mso-spacerun:yes'>      </span>#include &quot;CVIPimage.h&quot;</pre><pre><span style='mso-spacerun:yes'>      </span>#include &quot;CVIPtransform.h&quot;</pre><pre><span style='mso-spacerun:yes'>      </span>#include &quot;CVIPxformfilter.h&quot;</pre><pre><span style='mso-spacerun:yes'>      </span>#include &quot;CVIPdef.h&quot;</pre><pre><o:p>&nbsp;</o:p></pre><pre><span style='mso-spacerun:yes'>     </span>Image *parametric_<span
class=GramE>wiener(</span>Image *degr, Image *degr_fn,<span style='mso-spacerun:yes'>  </span>Image</pre><pre><span style='mso-spacerun:yes'>     </span>*p_noise<span
class=GramE>,<span style='mso-spacerun:yes'>  </span>Image</span><span style='mso-spacerun:yes'>  </span>*p_orig, float gamma, int choice, int cut-</pre><pre><span style='mso-spacerun:yes'>     </span><span
class=GramE>off</span>)</pre><pre><o:p>&nbsp;</o:p></pre><pre><span style='mso-spacerun:yes'>      </span>&lt;<span
class=GramE>degr</span>&gt;<span style='mso-spacerun:yes'>    </span>- pointer to the degraded image</pre><pre><span style='mso-spacerun:yes'>      </span>&lt;degr_fn&gt; - pointer to the degradation function</pre><pre><span style='mso-spacerun:yes'>      </span>&lt;p_noise&gt; - pointer to the noise power spectral density</pre><pre><span style='mso-spacerun:yes'>      </span>&lt;p_orig<span
class=GramE>&gt;<span style='mso-spacerun:yes'>  </span>-</span> pointer to the original<span style='mso-spacerun:yes'>  </span>image<span style='mso-spacerun:yes'>  </span>power<span style='mso-spacerun:yes'>  </span>spectral</pre><pre><span style='mso-spacerun:yes'>     </span><span
class=GramE>density</span></pre><pre><span style='mso-spacerun:yes'>      </span>&lt;<span
class=GramE>gamma</span>&gt;<span style='mso-spacerun:yes'>   </span>- 'gamma' in the parametric wiener<span style='mso-spacerun:yes'>  </span>filter<span style='mso-spacerun:yes'>  </span>equa-</pre><pre><span style='mso-spacerun:yes'>     </span><span
class=GramE>tion</span></pre><pre><span style='mso-spacerun:yes'>      </span>&lt;<span
class=GramE>choice</span>&gt;<span style='mso-spacerun:yes'>  </span>- sets the maximum gain using the DC value<span style='mso-spacerun:yes'>  </span>as<span style='mso-spacerun:yes'>  </span>a</pre><pre><span style='mso-spacerun:yes'>     </span><span
class=GramE>baseline</span></pre><pre><span style='mso-spacerun:yes'>      </span>&lt;<span
class=GramE>cutoff</span>&gt;<span style='mso-spacerun:yes'>  </span>- cutoff frequency for filtering</pre><pre><o:p>&nbsp;</o:p></pre>

<h2><st1:stockticker>PATH</st1:stockticker></h2>

<pre><span style='mso-spacerun:yes'>     </span>$CVIPtoolsHOME\CVIPC\XFORMFILTER\restore_xformfilter.c</pre><pre><o:p>&nbsp;</o:p></pre>

<h2>DESCRIPTION</h2>

<pre><span style='mso-spacerun:yes'>     </span>This function performs a parametric wiener filter.<span style='mso-spacerun:yes'>  </span><span
class=GramE>See<span style='mso-spacerun:yes'>  </span>any</span></pre><pre><span style='mso-spacerun:yes'>     </span><span
class=GramE>image</span> processing textbook for info on Wiener Filters.</pre><pre><o:p>&nbsp;</o:p></pre><pre><span style='mso-spacerun:yes'>     </span>The function does its own memory management, <span
class=GramE>freeing<span style='mso-spacerun:yes'>  </span>every</span>-</pre><pre><span style='mso-spacerun:yes'>     </span><span
class=GramE>thing<span style='mso-spacerun:yes'>  </span>passed</span> to it, so if you need your images intact, make</pre><pre><span style='mso-spacerun:yes'>     </span><span
class=GramE>a</span> copy of them before calling this function.</pre><pre><o:p>&nbsp;</o:p></pre><pre><span style='mso-spacerun:yes'>     </span>The function tries to determine whether an FFT has been per-</pre><pre><span style='mso-spacerun:yes'>     </span><span
class=GramE>formed</span> on the passed images.<span style='mso-spacerun:yes'>  </span>If not, the function will per-</pre><pre><span style='mso-spacerun:yes'>     </span><span
class=GramE>form</span> the FFT.<span style='mso-spacerun:yes'>  </span>This is especially important to note <span
class=GramE>for<span style='mso-spacerun:yes'>  </span>the</span></pre><pre><span style='mso-spacerun:yes'>     </span><span
class=GramE>power<span style='mso-spacerun:yes'>  </span>images</span>.<span style='mso-spacerun:yes'>   </span><span
class=GramE>If<span style='mso-spacerun:yes'>  </span>the</span><span style='mso-spacerun:yes'>  </span>power<span style='mso-spacerun:yes'>  </span>images<span style='mso-spacerun:yes'>  </span>are<span style='mso-spacerun:yes'>  </span>in the spatial</pre><pre><span style='mso-spacerun:yes'>     </span><span
class=GramE>domain</span>, they will have an FFT performed on them, before<span style='mso-spacerun:yes'>  </span>the</pre><pre><span style='mso-spacerun:yes'>    </span><span style='mso-spacerun:yes'> </span><span
class=GramE>squared<span style='mso-spacerun:yes'>  </span>magnitude</span><span style='mso-spacerun:yes'>  </span>is calculated.<span style='mso-spacerun:yes'>  </span>If an FFT is detected in</pre><pre><span style='mso-spacerun:yes'>     </span><span
class=GramE>the</span> history of any<span style='mso-spacerun:yes'>  </span>of<span style='mso-spacerun:yes'>  </span>the<span style='mso-spacerun:yes'>  </span>power<span style='mso-spacerun:yes'>  </span>images,<span style='mso-spacerun:yes'>  </span>that<span style='mso-spacerun:yes'>  </span>image<span style='mso-spacerun:yes'>  </span>is</pre><pre><span style='mso-spacerun:yes'>     </span><span
class=GramE>assumed<span style='mso-spacerun:yes'>  </span>to</span><span style='mso-spacerun:yes'>  </span>be<span style='mso-spacerun:yes'>  </span>representing<span style='mso-spacerun:yes'>  </span>a power image, and no squared</pre><pre><span style='mso-spacerun:yes'>     </span><span
class=GramE>magnitude</span> is calculated.</pre><pre><o:p>&nbsp;</o:p></pre><pre><span style='mso-spacerun:yes'>     </span>The function will also extend the sizes of the passed images</pre><pre><span style='mso-spacerun:yes'>     </span><span
class=GramE>as</span> best it can when they are of unequal size.</pre><pre><o:p>&nbsp;</o:p></pre><pre><span style='mso-spacerun:yes'>     </span>Also note that the passed images must have <span
class=GramE>the<span style='mso-spacerun:yes'>  </span>same</span><span style='mso-spacerun:yes'>  </span>number</pre><pre><span style='mso-spacerun:yes'>     </span><span
class=GramE>of</span> (color) bands.</pre><pre><o:p>&nbsp;</o:p></pre>

<h2>TYPES AND C<st1:stockticker>ONST</st1:stockticker>ANTS</h2>

<pre><span style='mso-spacerun:yes'>     </span>None</pre><pre><o:p>&nbsp;</o:p></pre>

<h2>RETURN VALUES</h2>

<pre><span style='mso-spacerun:yes'>     </span>A pointer to the restored (filtered) image</pre><pre><o:p>&nbsp;</o:p></pre>

<h2>HISTORY</h2>

<pre><span style='mso-spacerun:yes'>     </span>History information recorded:</pre><pre><o:p>&nbsp;</o:p></pre><pre><span style='mso-spacerun:yes'>       </span><span
class=GramE>parameter</span> #1 = filter cutoff.</pre><pre><span style='mso-spacerun:yes'>       </span><span
class=GramE>parameter</span> #2 = method 1: F(u,v)=G(u,v) when H(u,v)=0</pre><pre><span style='mso-spacerun:yes'>                      </span><span
class=GramE>method</span> 2: F(u,v)=0 when H(u,v)=0</pre><pre><o:p>&nbsp;</o:p></pre>

<h2>EXAMPLE</h2>

<pre><span style='mso-spacerun:yes'>      </span>#include &lt;CVIPtoolkit.h&gt;</pre><pre><span style='mso-spacerun:yes'>     </span><span style='mso-spacerun:yes'> </span>#include &lt;CVIPimage.h&gt;</pre><pre><span style='mso-spacerun:yes'>      </span>#include &lt;CVIPdef.h&gt;</pre><pre><span style='mso-spacerun:yes'>      </span>#include &lt;CVIPconvert.h&gt;</pre><pre><span style='mso-spacerun:yes'>      </span>#include &lt;CVIPview.h&gt;</pre><pre><span style='mso-spacerun:yes'>      </span>#include &quot;CVIPxformfilter.h&quot;</pre><pre><span style='mso-spacerun:yes'>      </span>#define VIEWER &quot;picture&quot;</pre><pre><span style='mso-spacerun:yes'>      </span>#define VIDEO_APP &quot;SunVideo &amp;&quot;</pre><pre><o:p>&nbsp;</o:p></pre><pre><span style='mso-spacerun:yes'>      </span><span
class=GramE>void</span> main()</pre><pre><span style='mso-spacerun:yes'>      </span>{</pre><pre><span style='mso-spacerun:yes'>      </span>Image *cvipImage,*cvipImage1;</pre><pre><span style='mso-spacerun:yes'>      </span>Image *cvipImage2,*cvipImage3;</pre><pre><span style='mso-spacerun:yes'>      </span>IMAGE_FORMAT format;</pre><pre><span style='mso-spacerun:yes'>      </span><span
class=GramE>char</span> *inputfile,*outputfile;</pre><pre><span style='mso-spacerun:yes'>      </span><span
class=GramE>char</span> *inputfile1,*inputfile2;</pre><pre><o:p>&nbsp;</o:p></pre><pre><span style='mso-spacerun:yes'>      </span>(<span
class=GramE>void</span>) setDisplay_Image(VIEWER,&quot;default&quot;);</pre><pre><span style='mso-spacerun:yes'>      </span>print_<span
class=GramE>CVIP(</span>&quot;\n\t\tEnter the File Name of the degraded</pre><pre><span style='mso-spacerun:yes'>      </span><span
class=GramE>image</span>:<span style='mso-spacerun:yes'>  </span>&quot;);</pre><pre><span style='mso-spacerun:yes'>      </span><span
class=GramE>inputfile</span> =(char *) getString_CVIP();</pre><pre><span style='mso-spacerun:yes'>      </span><span
class=GramE>format</span> = getFormat_CVIP(inputfile);</pre><pre><span style='mso-spacerun:yes'>      </span><span
class=GramE>cvipImage</span> = read_Image(inputfile,1);</pre><pre><span style='mso-spacerun:yes'>      </span>view_<span
class=GramE>Image(</span>cvipImage, inputfile);</pre><pre><span style='mso-spacerun:yes'>      </span><span
class=GramE>free(</span>inputfile);</pre><pre><span style='mso-spacerun:yes'>      </span>/* the following call creates a gaussian mask of size</pre><pre><span style='mso-spacerun:yes'>      </span><span
class=GramE>3<span style='mso-spacerun:yes'>  </span>*</span> 3 */</pre><pre><span style='mso-spacerun:yes'>      </span>cvipImage1 = (Image *<span
class=GramE>)h</span>_image(3,3,3);</pre><pre><span style='mso-spacerun:yes'>      </span>print_<span
class=GramE>CVIP(</span>&quot;\n\t\tEnter the File Name of the original</pre><pre><span style='mso-spacerun:yes'>      </span><span
class=GramE>power</span> spectrum image:<span style='mso-spacerun:yes'>  </span>&quot;);</pre><pre><span style='mso-spacerun:yes'>      </span>inputfile1 <span
class=GramE>=(</span>char *) getString_CVIP();</pre><pre><span style='mso-spacerun:yes'>      </span><span
class=GramE>format</span> = getFormat_CVIP(inputfile1);</pre><pre><span style='mso-spacerun:yes'>      </span>cvipImage2 = read_<span
class=GramE>Image(</span>inputfile1,1);</pre><pre><span style='mso-spacerun:yes'>      </span>view_<span
class=GramE>Image(</span>cvipImage2, inputfile1);</pre><pre><span style='mso-spacerun:yes'>      </span><span
class=GramE>free(</span>inputfile1);</pre><pre><span style='mso-spacerun:yes'>      </span>print_<span
class=GramE>CVIP(</span>&quot;\n\t\tEnter the File Name of the noise power</pre><pre><span style='mso-spacerun:yes'>      </span><span
class=GramE>spectrum</span> image:<span style='mso-spacerun:yes'>  </span>&quot;);</pre><pre><span style='mso-spacerun:yes'>      </span>inputfile2 <span
class=GramE>=(</span>char *) getString_CVIP();</pre><pre><span style='mso-spacerun:yes'>  </span><span style='mso-spacerun:yes'>    </span><span
class=GramE>format</span> = getFormat_CVIP(inputfile2);</pre><pre><span style='mso-spacerun:yes'>      </span>cvipImage3 = read_<span
class=GramE>Image(</span>inputfile2,1);</pre><pre><span style='mso-spacerun:yes'>      </span>view_<span
class=GramE>Image(</span>cvipImage3, inputfile2);</pre><pre><span style='mso-spacerun:yes'>      </span><span
class=GramE>free(</span>inputfile2);</pre><pre><span style='mso-spacerun:yes'>      </span>/* the following call performs the parametric wiener</pre><pre><span style='mso-spacerun:yes'>      </span><span
class=GramE>filter</span> on the input image with the gaussian</pre><pre><span style='mso-spacerun:yes'>      </span><span
class=GramE>mask</span> and the cut off frequency equal to 32<span style='mso-spacerun:yes'>  </span>*/</pre><pre><span style='mso-spacerun:yes'>      </span>cvipImage3<span
class=GramE>=(</span>Image *)parametric_wiener(cvipImage,</pre><pre><span style='mso-spacerun:yes'>      </span>cvipImage1<span
class=GramE>,cvipImage2,cvipImage3</span>,.5,1,32);</pre><pre><span style='mso-spacerun:yes'>      </span><span
class=GramE>cvipImage</span>=(Image *)ifft_transform(cvipImage3,256);</pre><pre><span style='mso-spacerun:yes'>      </span>print_<span
class=GramE>CVIP(</span>&quot;\n\t\tEnter the Output File Name:<span style='mso-spacerun:yes'>  </span>&quot;);</pre><pre><span style='mso-spacerun:yes'>      </span><span
class=GramE>outputfile</span> = getString_CVIP();</pre><pre><span style='mso-spacerun:yes'>      </span>view_<span
class=GramE>Image(</span>cvipImage,outputfile);</pre><pre><span style='mso-spacerun:yes'>      </span>write_<span
class=GramE>Image(</span>cvipImage,outputfile,CVIP_NO,CVIP_NO,format,1);</pre><pre><span style='mso-spacerun:yes'>      </span><span
class=GramE>free(</span>outputfile);</pre><pre><span style='mso-spacerun:yes'>      </span>}</pre><pre><o:p>&nbsp;</o:p></pre>

<h2>SEE ALSO</h2>

<pre><span style='mso-spacerun:yes'>     </span>XFORMFILTER library</pre><pre><o:p>&nbsp;</o:p></pre>

<h2>AUTHOR</h2>

<pre><span style='mso-spacerun:yes'>     </span>Copyright (C) 1996, 2004 SIUE -<span style='mso-spacerun:yes'>  </span>by<span style='mso-spacerun:yes'>  </span>Scott<span style='mso-spacerun:yes'>  </span>E.<span style='mso-spacerun:yes'>  </span><span
class=GramE>Umbaugh<span style='mso-spacerun:yes'>  </span>and</span><span style='mso-spacerun:yes'>  </span>Arve</pre><pre><span style='mso-spacerun:yes'>     </span><span
class=GramE>Kjoelen.</span></pre><pre><o:p>&nbsp;</o:p></pre>

<p class=MsoNormal><o:p>&nbsp;</o:p></p>

</div>

</body>

</html>
